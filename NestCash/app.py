# app.py - Main application file (jav√≠tott verzi√≥)
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import time
import hashlib
import os
import json
from pathlib import Path
from pymongo import MongoClient
from bson.objectid import ObjectId
from dotenv import load_dotenv
from pymongo.errors import ConnectionFailure, ServerSelectionTimeoutError
import streamlit as st
from database import (get_mongo_client, load_data, load_accounts, 
                      authenticate_user, hash_password, db)

def post_badge_achievement(user_id, username, badge_name, tier_name, reward):
    # Ellen≈ërizz√ºk, hogy ez a kit≈±z≈ë/szint kombin√°ci√≥ m√°r posztolva lett-e a felhaszn√°l√≥nak
    # Ehhez felt√©telezz√ºk, hogy van egy 'user_badge_posts' kollekci√≥ a MongoDB-ben
    # Amiben t√°roljuk, hogy mely felhaszn√°l√≥ melyik kit≈±z≈ëj√©r≈ël (n√©v + szint) posztoltunk m√°r.

    # El≈ësz√∂r is, ellen≈ërizz√ºk, hogy a user_id nem None vagy NaN
    if user_id is None or pd.isna(user_id):
        return

    # Ideiglenes megold√°s, ha a user_id nem int, hanem pl. ObjectId j√∂n valahonnan
    try:
        user_id = int(user_id)
    except ValueError:
        st.error(f"√ârv√©nytelen user_id form√°tum: {user_id}")
        return

    post_identifier = f"{badge_name} - {tier_name}" # Egyedi azonos√≠t√≥ a poszthoz

    existing_post_record = db.user_badge_posts.find_one({
        "user_id": user_id,
        "badge_identifier": post_identifier
    })

    if not existing_post_record:
        # Ha m√©g nem posztoltuk, akkor hozzuk l√©tre a posztot
        new_post_id = str(int(time.time() * 1000))

        post_title = f"{username} megszerezte a {tier_name} ({badge_name}) kit≈±z≈ët!"
        post_content = f"{tier_name}: {reward}"

        new_forum_post = {
            "post_id": new_post_id,
            "user_id": user_id,
            "username": username,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M"),
            "title": post_title,
            "content": post_content,
            "category": "Kit≈±z≈ëk", # √öj kateg√≥ria a f√≥rumon, vagy v√°laszthatsz megl√©v≈ët
            "privacy_level": "publikus", # Vagy "ismer≈ës√∂k", "priv√°t"
            "like_count": 0,
            "comment_count": 0
        }

        db.forum_posts.insert_one(new_forum_post)

        # R√∂gz√≠ts√ºk, hogy err≈ël a kit≈±z≈ër≈ël m√°r posztoltunk
        db.user_badge_posts.insert_one({
            "user_id": user_id,
            "badge_identifier": post_identifier,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M")
        })
        st.success(f"Sikeresen posztoltad a f√≥rumba: {post_title}") # Itt egy visszajelz√©s a felhaszn√°l√≥nak
        
#%% Execution
if __name__ == "__main__":
    st.set_page_config(
        page_title="F≈ëmen√º",  # B√∂ng√©sz≈ëlapon megjelen≈ë c√≠m
        page_icon="",         # Opcion√°lis ikon (pl. emoji vagy f√°jl)
        layout="wide"                 # Opcion√°lis elrendez√©s
    )

    # Initialize session state
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False
        st.session_state.current_user = None
        st.session_state.user_id = None
        st.session_state.username = None
        st.session_state.df = load_data()
        
        # T√≠puskonverzi√≥k csak akkor, ha van adat
        if not st.session_state.df.empty:
            numeric_columns = ['assets', 'befektetes', 'likvid', 'megtakaritas', 'osszeg']
            for col in numeric_columns:
                if col in st.session_state.df.columns:
                    st.session_state.df[col] = pd.to_numeric(st.session_state.df[col], errors='coerce').fillna(0)
        
        st.session_state.accounts = load_accounts()
    
    # Main app
    st.title("üí∞ NestCash protot√≠pus")
    
    # Login/Registration
    if not st.session_state.logged_in:
        tab1, tab2 = st.tabs(["Bejelentkez√©s", "Regisztr√°ci√≥"])
        
        with tab1:
            with st.form("Bejelentkez√©s"):
                username = st.text_input("Felhaszn√°l√≥n√©v")
                password = st.text_input("Jelsz√≥", type="password")
                submitted = st.form_submit_button("Bejelentkez√©s")
                
                if submitted:
                    user = authenticate_user(username, password)
                    if user is not None:
                        st.session_state.logged_in = True
                        st.session_state.current_user = user
                        st.session_state.user_id = user["user_id"]
                        st.session_state.username = user["username"]
                        st.success("Sikeres bejelentkez√©s!")
                        st.rerun()
                    else:
                        st.error("Hib√°s felhaszn√°l√≥n√©v vagy jelsz√≥!")
        
        with tab2:
            with st.form("Regisztr√°ci√≥"):
                new_username = st.text_input("√öj felhaszn√°l√≥n√©v")
                new_password = st.text_input("√öj jelsz√≥", type="password")
                confirm_password = st.text_input("Jelsz√≥ meger≈ës√≠t√©se", type="password")
                email = st.text_input("E-mail c√≠m")
                submitted = st.form_submit_button("Regisztr√°ci√≥")
                
                if submitted:
                    if db.users.find_one({"username": new_username}):
                        st.error("Ez a felhaszn√°l√≥n√©v m√°r foglalt!")
                    elif new_password != confirm_password:
                        st.error("A jelszavak nem egyeznek!")
                    else:
                        last_user = db.users.find_one(sort=[("user_id", -1)])
                        new_user_id = 1 if last_user is None else last_user["user_id"] + 1
                        
                        while db.users.find_one({"user_id": new_user_id}) is not None:
                            new_user_id += 1
                        
                        new_user = {
                            "user_id": new_user_id,
                            "username": new_username,
                            "password": hash_password(new_password),
                            "email": email,
                            "registration_date": datetime.now().strftime("%Y-%m-%d")
                        }
                        
                        db.users.insert_one(new_user)
                        
                        st.session_state.logged_in = True
                        st.session_state.current_user = new_user
                        st.session_state.user_id = new_user_id
                        st.session_state.username = new_username
                        st.success("Sikeres regisztr√°ci√≥!")
                        st.rerun()
        st.stop()
    
    # If logged in, show the main interface
    if st.session_state.logged_in:
        username = st.session_state.username
        st.session_state.user_id = db.users.find_one({"username": username})['user_id']
        current_user = st.session_state.user_id
        st.success(f"üë§ Bejelentkezve mint: {username} (ID: {current_user})")
        if st.button("Kijelentkez√©s", key="logout_btn"):
            st.session_state.logged_in = False
            st.session_state.current_user = None
            st.session_state.user_id = None
            st.session_state.username = None
            st.success("Sikeresen kijelentkezt√©l!")
            st.rerun()
        st.header(f"√údv√∂zl√ºnk, {username}!")
        
        # Show user metrics
        user_df = st.session_state.df[st.session_state.df["user_id"] == current_user]
        if user_df.empty:
            st.session_state.profil = 'alap'
        else:
            st.session_state.profil = user_df['profil'].iloc[-1]
        
        if user_df.empty:
            likvid = 0
            befektetes = 0
            megtakaritas = 0
            profil = 'alap'
        else:
            likvid = user_df['likvid'].iloc[-1]
            befektetes = user_df['befektetes'].iloc[-1]
            megtakaritas = user_df['megtakaritas'].iloc[-1]
            profil = user_df['profil'].iloc[-1]
        
        cols = st.columns(3)
        cols[0].metric("üíµ Likvid", f"{likvid:,.0f}Ft")
        cols[1].metric("üìà Befektet√©sek", f"{befektetes:,.0f}Ft")
        cols[2].metric("üè¶ Megtakar√≠t√°sok", f"{megtakaritas:,.0f}Ft")
        
        
            
st.header("")
st.header("üë§ Profil")

with st.expander("**üèÜ Kit≈±z≈ëk**", expanded=True):
    # Load user data for badge calculations
    user_transactions = st.session_state.df[st.session_state.df["user_id"] == current_user]
    user_habits = list(db.habits.find({"user_id": str(current_user)}))
    user_posts = list(db.forum_posts.find({"user_id": current_user}))
    user_follows = list(db.user_follows.find({"follower_id": current_user}))
    
    
    # Calculate badge metrics
    def calculate_badge_metrics():
        lessons_completed_count = db.lesson_completions.count_documents({
                "user_id": current_user, 
                "completed": True
            })
        
        quizzes_completed_count = db.lesson_completions.count_documents({
                "user_id": current_user,
                "quiz_score": {"$ne": None}  # $ne = not equal (nem egyenl≈ë)
            })
        
        metrics = {
            "transactions_days": user_transactions['datum'].nunique() if not user_transactions.empty else 0,
            "savings_rate": round(1 - (user_transactions[user_transactions['bev_kiad_tipus'] != 'bevetel']['osszeg'].abs().sum() / 
                user_transactions[user_transactions['bev_kiad_tipus'] == 'bevetel']['osszeg'].sum()), 3) \
                if not user_transactions.empty else 0,
            "active_habits": len([h for h in user_habits if h.get("is_active", True)]),
            "habit_streak": max([h.get("best_streak", 0) for h in user_habits]) if user_habits else 0,
            "forum_posts": len(user_posts),
            "following_count": len(user_follows),
            "lessons_completed": lessons_completed_count,
            "quizzes_completed": quizzes_completed_count,  # Placeholder
        }
        
        return metrics
        
    def check_and_update_badges(metrics):
        # El≈ëz≈ë badge √°llapot bet√∂lt√©se
        previous_badge_state = db.user_badge_progress.find_one({"user_id": current_user}) or {}
        
        # Badge defin√≠ci√≥k
        badge_definitions = {
            "learning": {
                "lessons": {
                    "name": "üìö Tud√°sgy≈±jt≈ë",
                    "icon": "üìö",
                    "desc": "Tanul√°si anyagok elv√©gz√©se",
                    "current_value": metrics["lessons_completed"],
                    "tiers": [
                        {"requirement": 1, "name": "Tud√°scs√≠ra", "reward": "Els≈ë lecke elv√©gz√©se"},
                        {"requirement": 5, "name": "Tanul√≥", "reward": "5 lecke elv√©gz√©se"},
                        {"requirement": 15, "name": "Tud√°sv√°gy", "reward": "15 lecke elv√©gz√©se"},
                        {"requirement": 30, "name": "Tud√°smester", "reward": "30 lecke elv√©gz√©se"},
                    ]
                },
                "quizzes": {
                    "name": "üéØ Kv√≠zharcos",
                    "icon": "üéØ",
                    "desc": "Kv√≠zek sikeres kit√∂lt√©se",
                    "current_value": metrics["quizzes_completed"],
                    "tiers": [
                        {"requirement": 1, "name": "Els≈ë Kv√≠z", "reward": "Els≈ë kv√≠z kit√∂lt√©se"},
                        {"requirement": 5, "name": "Kv√≠zkedvel≈ë", "reward": "5 kv√≠z kit√∂lt√©se"},
                        {"requirement": 15, "name": "Kv√≠zharcos", "reward": "15 kv√≠z kit√∂lt√©se"},
                        {"requirement": 25, "name": "Kv√≠zmester", "reward": "25 kv√≠z kit√∂lt√©se"},
                    ]
                }
            },
            "saving": {
                "amount": {
                    "name": "üí∞ Sp√≥rol√≥",
                    "icon": "üí∞",
                    "desc": "Megtakar√≠tott √∂sszeg",
                    "current_value": metrics["savings_rate"],
                    "tiers": [
                        {"requirement": 0.10, "name": "Fill√©rgy≈±jt≈ë", "reward": "10% megtakar√≠t√°si r√°ta"},
                        {"requirement": 0.17, "name": "Sp√≥rol√≥", "reward": "17% megtakar√≠t√°si r√°ta"},
                        {"requirement": 0.24, "name": "Takar√©kos", "reward": "24% megtakar√≠t√°si r√°ta"},
                        {"requirement": 0.31, "name": "Megtakar√≠t√°s Mestere", "reward": "31% megtakar√≠t√°si r√°ta"},
                    ]
                },
                "tracking": {
                    "name": "üìä Nyomonk√∂vet≈ë",
                    "icon": "üìä",
                    "desc": "Tranzakci√≥k r√∂gz√≠t√©se",
                    "current_value": metrics["transactions_days"],
                    "tiers": [
                        {"requirement": 1, "name": "Els≈ë R√∂gz√≠t√©s", "reward": "Els≈ë tranzakci√≥ r√∂gz√≠t√©se"},
                        {"requirement": 7, "name": "Heti Rendszeress√©g", "reward": "7 napos nyomon k√∂vet√©s"},
                        {"requirement": 30, "name": "Havi Rendszeress√©g", "reward": "30 napos nyomon k√∂vet√©s"},
                        {"requirement": 90, "name": "Elk√∂telezett", "reward": "90 napos nyomon k√∂vet√©s"},
                        {"requirement": 180, "name": "Nyomon k√∂vet√©s Mestere", "reward": "180 napos nyomon k√∂vet√©s"},
                    ]
                }
            },
            "habit": {
                "creation": {
                    "name": "üîÑ Szok√°s√©p√≠t≈ë",
                    "icon": "üîÑ",
                    "desc": "Szok√°sok l√©trehoz√°sa",
                    "current_value": len(user_habits),
                    "tiers": [
                        {"requirement": 1, "name": "Els≈ë Szok√°s", "reward": "Els≈ë szok√°s l√©trehoz√°sa"},
                        {"requirement": 3, "name": "Szok√°sgy≈±jt≈ë", "reward": "3 szok√°s l√©trehoz√°sa"},
                        {"requirement": 5, "name": "Szok√°smester", "reward": "5 szok√°s l√©trehoz√°sa"},
                        {"requirement": 10, "name": "Szok√°sguru", "reward": "10 szok√°s l√©trehoz√°sa"},
                    ]
                },
                "streak": {
                    "name": "‚ö° Kitart√≥",
                    "icon": "‚ö°",
                    "desc": "Leghosszabb szok√°s sorozat",
                    "current_value": metrics["habit_streak"],
                    "tiers": [
                        {"requirement": 3, "name": "Kezd≈ë Kitart√°s", "reward": "3 napos sorozat"},
                        {"requirement": 7, "name": "Heti Kitart√°s", "reward": "7 napos sorozat"},
                        {"requirement": 21, "name": "Szok√°ss√° V√°l√≥", "reward": "21 napos sorozat"},
                        {"requirement": 66, "name": "Megszil√°rdult", "reward": "66 napos sorozat"},
                    ]
                }
            },
            "community": {
                "posts": {
                    "name": "üí¨ Besz√©lget≈ës",
                    "icon": "üí¨",
                    "desc": "F√≥rum bejegyz√©sek",
                    "current_value": metrics["forum_posts"],
                    "tiers": [
                        {"requirement": 1, "name": "Els≈ë Hang", "reward": "Els≈ë f√≥rum bejegyz√©s"},
                        {"requirement": 5, "name": "Akt√≠v Tag", "reward": "5 f√≥rum bejegyz√©s"},
                        {"requirement": 15, "name": "Besz√©lget≈ës", "reward": "15 f√≥rum bejegyz√©s"},
                        {"requirement": 50, "name": "K√∂z√∂ss√©g Motorja", "reward": "50 f√≥rum bejegyz√©s"},
                    ]
                },
                "following": {
                    "name": "ü§ù Kapcsolat√©p√≠t≈ë",
                    "icon": "ü§ù",
                    "desc": "K√∂vetett felhaszn√°l√≥k",
                    "current_value": metrics["following_count"],
                    "tiers": [
                        {"requirement": 1, "name": "Els≈ë Kapcsolat", "reward": "Els≈ë felhaszn√°l√≥ k√∂vet√©se"},
                        {"requirement": 3, "name": "T√°rsas√°gkedvel≈ë", "reward": "3 felhaszn√°l√≥ k√∂vet√©se"},
                        {"requirement": 10, "name": "Kapcsolat√©p√≠t≈ë", "reward": "10 felhaszn√°l√≥ k√∂vet√©se"},
                        {"requirement": 25, "name": "K√∂z√∂ss√©gi H√°l√≥", "reward": "25 felhaszn√°l√≥ k√∂vet√©se"},
                    ]
                }
            }
        }
        
        # √öj badge szintek ellen≈ërz√©se √©s √©rtes√≠t√©sek k√ºld√©se
        for category_name, category in badge_definitions.items():
            for badge_key, badge_data in category.items():
                current_value = metrics.get(badge_key, badge_data["current_value"])
                previous_value = previous_badge_state.get(badge_key, {}).get("value", 0)
                
                current_tier, current_tier_info, _, _ = get_current_tier(current_value, badge_data["tiers"])
                previous_tier, _, _, _ = get_current_tier(previous_value, badge_data["tiers"])
                
                # Ha √∫j szintet √©rt√ºnk el
                if current_tier > previous_tier and current_tier_info:
                    notification_id = str(int(time.time() * 1000))
                    new_notification = {
                        "notification_id": notification_id,
                        "user_id": current_user,
                        "type": "üéñÔ∏è Kit≈±z≈ëk",
                        "message": f"Gratul√°lunk! Megszerezted a {current_tier_info['name']} szint≈± {badge_data['name']} kit≈±z≈ët!",
                        "related_id": f"badge_{badge_key}_{current_tier}",
                        "from_user": 0,  # 0 = rendszer
                        "from_username": "NestCash Rendszer",
                        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M"),
                        "read": False,
                        "action_url": None
                    }
                    db.notifications.insert_one(new_notification)
        
        # Jelenlegi √°llapot ment√©se
        db.user_badge_progress.update_one(
            {"user_id": current_user},
            {"$set": {
                "user_id": current_user,
                "metrics": metrics,
                "last_updated": datetime.now().strftime("%Y-%m-%d %H:%M")
            }},
            upsert=True
        )
        
        return badge_definitions
    
    # Define tiered badges (multi-level)
    def get_current_tier(value, tiers):
        """Get current tier and next tier info"""
        current_tier = 0
        next_tier = None
        
        for i, tier in enumerate(tiers):
            if value >= tier["requirement"]:
                current_tier = i + 1
            else:
                next_tier = tier
                break
        
        current_tier_info = tiers[current_tier - 1] if current_tier > 0 else None
        max_tier = len(tiers)
        
        return current_tier, current_tier_info, next_tier, max_tier
    
    def render_tiered_badge(badge_data):
        """Render a single tiered badge"""
        current_tier, current_tier_info, next_tier, max_tier = get_current_tier(
            badge_data["current_value"], badge_data["tiers"]
        )
    
        # Badge header
        col1, col2 = st.columns([4, 1])
        with col1:
            st.markdown(f"**{badge_data['icon']} {badge_data['name']}**")
            st.caption(badge_data['desc'])
        with col2:
            st.markdown(f"**{current_tier}/{max_tier}**")
    
        # Current tier info
        if current_tier > 0:
            st.success(f"‚úÖ **{current_tier_info['name']}** - {current_tier_info['reward']}")
    
            # Posztol√°s gomb
            # Ellen≈ërizz√ºk, hogy m√°r posztoltunk-e err≈ël a kit≈±z≈ër≈ël
            post_identifier = f"{badge_data['name']} - {current_tier_info['name']}"
    
            # Itt hozz√°f√©r√ºnk a current_user √©s username v√°ltoz√≥khoz
            user_id_for_post = st.session_state.user_id
            username_for_post = st.session_state.username
    
            # A 'user_badge_posts' kollekci√≥ ellen≈ërz√©se
            existing_post_record = db.user_badge_posts.find_one({
                "user_id": user_id_for_post,
                "badge_identifier": post_identifier
            })
    
            if not existing_post_record:
                if st.button(f"Posztold a f√≥rumba: {current_tier_info['name']}", 
                             key=f"post_badge_{badge_data['name']}_{current_tier_info['name']}"):
                    post_badge_achievement(
                        user_id_for_post,
                        username_for_post,
                        badge_data["name"],
                        current_tier_info["name"],
                        current_tier_info["reward"]
                    )
                    st.rerun() # Fontos, hogy √∫jra fussuk, miut√°n posztoltunk
            else:
                st.info("Ezt a kit≈±z≈ët m√°r posztoltad a f√≥rumba.")
    
        # Next tier progress (ez a r√©sz v√°ltozatlan marad)
        if next_tier:
            progress_value = badge_data["current_value"] / next_tier["requirement"]
            st.markdown(f"üéØ **K√∂vetkez≈ë:** {next_tier['name']}")
            st.progress(min(1.0, progress_value))
            st.caption(f"Halad√°s: {badge_data['current_value']}/{next_tier['requirement']}")
        else:
            st.success("üèÜ **Minden szint teljes√≠tve!**")
    
        # Show tier progression (ez a r√©sz v√°ltozatlan marad)
        with st.expander("üìä Szintek √°ttekint√©se"):
            for i, tier in enumerate(badge_data["tiers"]):
                if i + 1 <= current_tier:
                    st.markdown(f"‚úÖ **{i+1}. szint:** {tier['name']} ({tier['requirement']} - {tier['reward']})")
                elif i + 1 == current_tier + 1:
                    st.markdown(f"üéØ **{i+1}. szint:** {tier['name']} ({tier['requirement']} - {tier['reward']})")
                else:
                    st.markdown(f"üîí **{i+1}. szint:** {tier['name']} ({tier['requirement']} - {tier['reward']})")

    metrics = calculate_badge_metrics()
    
    tiered_badges = check_and_update_badges(metrics)
    
    # Calculate total badges and progress
    total_current_tiers = 0
    total_possible_tiers = 0
    
    for category in tiered_badges.values():
        for badge in category.values():
            current_tier, _, _, max_tier = get_current_tier(badge["current_value"], badge["tiers"])
            total_current_tiers += current_tier
            total_possible_tiers += max_tier
    
    # Header with stats
    col1, col2 = st.columns([3, 1])
    with col1:
        st.markdown(f"### üèÜ Kit≈±z≈ëk ({total_current_tiers}/{total_possible_tiers})")
    with col2:
        progress_percent = (total_current_tiers / total_possible_tiers) * 100 if total_possible_tiers > 0 else 0
        st.metric("Teljes√≠t√©s", f"{progress_percent:.0f}%")
    
    # Progress bar
    st.progress(total_current_tiers / total_possible_tiers if total_possible_tiers > 0 else 0)
    
    st.markdown("---")
    
    # Badge categories
    tab1, tab2, tab3, tab4 = st.tabs(["üß† Tanul√°s", "üí∞ Sp√≥rol√°s", "üîÅ Szok√°sok", "üë• K√∂z√∂ss√©g"])
    
    st.markdown("---")
    
    # Render each category
    with tab1:
        for badge_data in tiered_badges["learning"].values():
            render_tiered_badge(badge_data)
    
    with tab2:
        for badge_data in tiered_badges["saving"].values():
            render_tiered_badge(badge_data)
    
    with tab3:
        for badge_data in tiered_badges["habit"].values():
            render_tiered_badge(badge_data)
    
    with tab4:
        for badge_data in tiered_badges["community"].values():
            render_tiered_badge(badge_data)
    
    # Next achievements section
    st.markdown("---")
    st.markdown("### üéØ Legk√∂zelebbi c√©lok")
    
    # Find next achievable badges
    next_goals = []
    for category_name, category in tiered_badges.items():
        for badge_key, badge_data in category.items():
            current_tier, _, next_tier, _ = get_current_tier(badge_data["current_value"], badge_data["tiers"])
            if next_tier:
                progress_percent = (badge_data["current_value"] / next_tier["requirement"]) * 100
                next_goals.append({
                    "name": f"{badge_data['icon']} {badge_data['name']}",
                    "next_tier": next_tier["name"],
                    "progress": progress_percent,
                    "current": badge_data["current_value"],
                    "target": next_tier["requirement"],
                    "category": category_name
                })
    
    # Sort by progress (closest to completion first)
    next_goals.sort(key=lambda x: x["progress"], reverse=True)
    
    if next_goals:
        # Show top 3 next goals
        cols = st.columns(min(3, len(next_goals)))
        for i, goal in enumerate(next_goals[:3]):
            with cols[i]:
                st.markdown(f"**{goal['name']}**")
                st.markdown(f"üéØ {goal['next_tier']}")
                st.progress(goal["progress"] / 100)
                st.caption(f"{goal['current']}/{goal['target']} ({goal['progress']:.0f}%)")
    else:
        st.success("üéâ Minden kit≈±z≈ë maxim√°lis szinten van!")
    
    # Motivational section
    if total_current_tiers == 0:
        st.markdown("---")
        st.info("üöÄ **Kezdj bele!** Az els≈ë tranzakci√≥ r√∂gz√≠t√©s√©vel vagy szok√°s l√©trehoz√°s√°val megszerezheted az els≈ë kit≈±z≈ëdet!")
    elif total_current_tiers < total_possible_tiers // 2:
        st.markdown("---")
        st.info(f"üí™ **J√≥ √∫ton j√°rsz!** M√°r {total_current_tiers} szintet teljes√≠tett√©l. √çgy tov√°bb!")
    else:
        st.markdown("---")
        st.success(f"üåü **Fantasztikus!** A kit≈±z≈ëk {progress_percent:.0f}%-√°t teljes√≠tetted!")

st.header("")

st.write("### Ismer≈ëseid")
st.write("#### (fejleszt√©s alatt...)")
st.header("")

st.write("### Bejegyz√©seid")
st.write("#### (fejleszt√©s alatt...)")
st.header("")

st.write("### Kih√≠v√°said")
st.write("#### (fejleszt√©s alatt...)")
st.header("")