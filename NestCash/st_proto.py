import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import time
from PenzugyiElemzo import PenzugyiElemzo

# Adatb√°zis kezel√©se
def load_data():
    try:
        return pd.read_csv("szintetikus_tranzakciok.csv")
    except:
        return pd.DataFrame(columns=[
            "datum", "honap", "het", "nap_sorszam", "tranzakcio_id", 
            "osszeg", "kategoria", "user_id", "profil", "tipus", 
            "leiras", "forras", "ismetlodo", "fix_koltseg", 
            "bev_kiad_tipus", "platform", "helyszin", "deviza", 
            "cimke", "celhoz_kotott", "balance", "reszvenyek", 
            "egyeb_befektetes", "assets"
        ])

def save_data(df):
    df.to_csv("szintetikus_tranzakciok.csv", index=False)

# Streamlit alkalmaz√°s
st.title("üí∞ P√©nz√ºgyi Elemz≈ë Alkalmaz√°s")
st.subheader("Adatok bevitele √©s elemz√©s")

# Adatok bet√∂lt√©se
df = load_data()

# √öj adat bevitele
with st.expander("‚ûï √öj tranzakci√≥ hozz√°ad√°sa"):
    with st.form("uj_tranzakcio"):
        col1, col2 = st.columns(2)
        datum = col1.date_input("D√°tum", datetime.today())
        osszeg = col2.number_input("√ñsszeg (Ft)", value=0)
        
        col3, col4 = st.columns(2)
        kategoria = col3.selectbox("Kateg√≥ria", [
            "fizetes", "elelmiszer", "lakber", "kozlekedes", 
            "sz√≥rakoz√°s", "eg√©szs√©g", "snack", "egy√©b"
        ])
        user_id = col4.number_input("User ID", min_value=1, value=1)
        
        col5, col6 = st.columns(2)
        profil = col5.selectbox("Profil", [
            "alacsony_jov", "kozeposztaly", "magas_jov", "arerzekeny"
        ])
        tipus = col6.selectbox("T√≠pus", ["alap", "impulzus"])
        
        bev_kiad_tipus = st.selectbox("Bev√©tel/Kiad√°s t√≠pus", [
            "bevetel", "szukseglet", "luxus"
        ])
        
        leiras = st.text_input("Le√≠r√°s")
        platform = st.selectbox("Platform", ["utalas", "k√©szp√©nz", "k√°rtya", "web"])
        
        submitted = st.form_submit_button("Hozz√°ad√°s")
        
        if submitted:
            new_row = {
                "datum": datum.strftime("%Y-%m-%d"),
                "honap": datum.strftime("%Y-%m"),
                "het": datum.isocalendar()[1],
                "nap_sorszam": datum.weekday(),
                "tranzakcio_id": f"{user_id}_{datum.strftime('%Y%m%d')}_{int(time.time())}",
                "osszeg": osszeg if bev_kiad_tipus == "bevetel" else -abs(osszeg),
                "kategoria": kategoria,
                "user_id": user_id,
                "profil": profil,
                "tipus": tipus,
                "leiras": leiras,
                "forras": "user",
                "ismetlodo": False,
                "fix_koltseg": kategoria in ["lakber", "rezsi"],
                "bev_kiad_tipus": bev_kiad_tipus,
                "platform": platform,
                "helyszin": "Egy√©b",
                "deviza": "HUF",
                "cimke": "",
                "celhoz_kotott": False,
                "balance": 0,
                "reszvenyek": 0,
                "egyeb_befektetes": 0,
                "assets": 0
            }
            
            # Balance sz√°m√≠t√°s
            user_data = df[df["user_id"] == user_id]
            if not user_data.empty:
                last_row = user_data.iloc[-1]
                new_row["balance"] = last_row["balance"] + new_row["osszeg"]
                new_row["assets"] = last_row["assets"] + new_row["osszeg"]
            else:
                new_row["balance"] = new_row["osszeg"]
                new_row["assets"] = new_row["osszeg"]
            
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
            save_data(df)
            st.success("Tranzakci√≥ sikeresen hozz√°adva!")

# Adatok megtekint√©se
if st.checkbox("Adatb√°zis megtekint√©se"):
    st.dataframe(df)

# Elemz√©s szekci√≥
st.header("P√©nz√ºgyi Elemz√©s")

if len(df) > 0:
    user_id = st.selectbox("V√°lassz felhaszn√°l√≥t", df["user_id"].unique())
    
    if st.button("Elemz√©s ind√≠t√°sa", type="primary"):
        with st.spinner("Elemz√©s folyamatban..."):
            elemzo = PenzugyiElemzo(df)
            jelent√©s = elemzo.generate_comprehensive_report(user_id)
            
            # Eredm√©nyek megjelen√≠t√©se
            st.success("Elemz√©s k√©sz!")
            
            # Executive Summary
            st.subheader("üìä Executive Summary")
            exec_summary = jelent√©s["executive_summary"]
            st.write(f"**P√©nz√ºgyi eg√©szs√©g pontsz√°m:** {exec_summary.get('penzugyi_egeszseg_pontszam', 'N/A')}")
            st.write(f"**√Åltal√°nos √©rt√©kel√©s:** {exec_summary.get('altalanos_ertekeles', 'N/A')}")
            
            st.write("**F≈ë er≈ëss√©gek:**")
            for erosseg in exec_summary.get('fo_erosegek', []):
                st.write(f"- {erosseg}")
            
            st.write("**F≈ë kih√≠v√°sok:**")
            for kihivas in exec_summary.get('fo_kihivasok', []):
                st.write(f"- {kihivas}")
            
            st.write("**Legfontosabb aj√°nl√°sok:**")
            for ajanlas in exec_summary.get('legfontosabb_ajanlasok', []):
                st.write(f"- {ajanlas}")
            
            # Cash Flow Elemz√©s
            st.subheader("üí∏ Cash Flow Elemz√©s")
            cash_flow = jelent√©s["cash_flow_elemzes"]
            
            st.write(f"**Havi √°tlagos sz√ºks√©glet kiad√°sok:** {cash_flow['burn_rate'].get('havi_atlag_szukseglet', 'N/A'):,.0f} Ft")
            st.write(f"**Havi √°tlagos luxus kiad√°sok:** {cash_flow['burn_rate'].get('havi_atlag_luxus', 'N/A'):,.0f} Ft")
            st.write(f"**Teljes burn rate:** {cash_flow['burn_rate'].get('total_burn_rate', 'N/A'):,.0f} Ft")
            
            st.write("**Runway elemz√©s:**")
            runway = cash_flow['runway'].get('runway_honapok', {})
            st.write(f"- Csak k√©szp√©nz: {runway.get('csak_keszpenz', 'N/A')} h√≥nap")
            st.write(f"- √ñsszes asset: {runway.get('osszes_asset', 'N/A')} h√≥nap")
            
            # Sp√≥rol√°si lehet≈ës√©gek
            st.subheader("üí° Sp√≥rol√°si Optimaliz√°ci√≥")
            sporolas = jelent√©s["sporolas_optimalizacio"]
            
            if 'pareto_analysis' in sporolas:
                st.write(f"**Pareto elemz√©s (80/20 szab√°ly):**")
                st.write(f"A kiad√°sok {sporolas['pareto_analysis'].get('pareto_arany_pct', 'N/A')}%-a {len(sporolas['pareto_analysis'].get('pareto_kategoriak', []))} kateg√≥ri√°b√≥l sz√°rmazik")
                st.write("Top kateg√≥ri√°k:")
                for kat in sporolas['pareto_analysis'].get('pareto_kategoriak', [])[:3]:
                    st.write(f"- {kat}")
            
            # Befektet√©si tan√°csok
            st.subheader("üìà Befektet√©si Tan√°csok")
            befektetes = jelent√©s["befektetesi_elemzes"]
            
            if 'portfolio_suggestions' in befektetes:
                st.write("**Jelenlegi portf√≥li√≥ allok√°ci√≥:**")
                for asset, pct in befektetes['portfolio_suggestions'].get('jelenlegi_allokaciok', {}).items():
                    st.write(f"- {asset}: {pct:.0f}%")
                
                st.write("**Javasolt portf√≥li√≥ allok√°ci√≥:**")
                for asset, pct in befektetes['portfolio_suggestions'].get('javasolt_allokaciok', {}).items():
                    st.write(f"- {asset}: {pct:.0f}%")
                
                st.write("**Rebalancing javaslatok:**")
                for action in befektetes['portfolio_suggestions'].get('rebalancing_actions', []):
                    st.write(f"- {action}")
else:
    st.warning("Nincs el√©g adat az elemz√©shez. K√©rj√ºk, adj hozz√° √∫j tranzakci√≥kat.")