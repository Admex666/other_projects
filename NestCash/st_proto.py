import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import time
from PenzugyiElemzo import PenzugyiElemzo
from UserFinancialEDA import UserFinancialEDA, run_user_eda

# Adatb√°zis kezel√©se
def load_data():
    try:
        return pd.read_csv("szintetikus_tranzakciok.csv")
    except:
        return pd.DataFrame(columns=[
            "datum", "honap", "het", "nap_sorszam", "tranzakcio_id", 
            "osszeg", "kategoria", "user_id", "profil", "tipus", 
            "leiras", "forras", "ismetlodo", "fix_koltseg", 
            "bev_kiad_tipus", "platform", "helyszin", "deviza", 
            "cimke", "celhoz_kotott", "balance", "reszvenyek", 
            "egyeb_befektetes", "assets"
        ])

def save_data(df):
    df.to_csv("szintetikus_tranzakciok.csv", index=False)

# Streamlit alkalmaz√°s
st.title("üí∞ NestCash protot√≠pus")
st.subheader("Tranzakci√≥k bevitele √©s elemz√©s")

# Adatok bet√∂lt√©se
df = load_data()

# Session state inicializ√°l√°sa
if 'selected_user' not in st.session_state:
    st.session_state.selected_user = None

# User kiv√°laszt√°sa
if not df.empty:
    available_users = df["user_id"].unique().tolist()
else:
    available_users = []

# Ha nincs m√©g felhaszn√°l√≥, lehet≈ës√©g √∫j l√©trehoz√°s√°ra
if not available_users:
    st.info("Nincsenek m√©g felhaszn√°l√≥k az adatb√°zisban. K√©rj√ºk, hozzon l√©tre egy √∫j felhaszn√°l√≥t.")
    new_user_id = st.number_input("√öj felhaszn√°l√≥ ID", min_value=1, value=1)
    if st.button("Felhaszn√°l√≥ l√©trehoz√°sa"):
        st.session_state.selected_user = new_user_id
        st.success(f"Felhaszn√°l√≥ {new_user_id} l√©trehozva! Most m√°r hozz√°adhat tranzakci√≥kat.")
else:
    # User kiv√°laszt√°sa
    selected_user = st.selectbox(
        "V√°laszd ki a felhaszn√°l√≥dat", 
        available_users,
        index=available_users.index(st.session_state.selected_user) if st.session_state.selected_user else 0
    )
    
    # Session state friss√≠t√©se
    if selected_user != st.session_state.selected_user:
        st.session_state.selected_user = selected_user
        st.rerun()
    
    st.success(f"Bejelentkezve mint: Felhaszn√°l√≥ {st.session_state.selected_user}")

# Csak akkor folytatjuk, ha van kiv√°lasztott felhaszn√°l√≥
if st.session_state.selected_user is not None:
    current_user = st.session_state.selected_user
    # Az aktu√°lis felhaszn√°l√≥ adatainak kinyer√©se
    user_df = df[df["user_id"] == current_user]
    balance = user_df['balance'].iloc[-1]
    st.write(f"K√©szp√©nz: **{balance:,.0f}Ft**")
    reszvenyek = user_df['reszvenyek'].iloc[-1]
    st.write(f"R√©szv√©nyek: **{reszvenyek:,.0f}Ft**")
    egyeb_befektetes = user_df['egyeb_befektetes'].iloc[-1]
    st.write(f"Egy√©b befektet√©s: **{egyeb_befektetes:,.0f}Ft**")
    
    
    # √öj adat bevitele - CSAK A KIV√ÅLASZTOTT FELHASZN√ÅL√ìHOZ
    with st.expander(f"‚ûï √öj tranzakci√≥ hozz√°ad√°sa (Felhaszn√°l√≥ {st.session_state.selected_user})"):
        with st.form("uj_tranzakcio"):
            col1, col2 = st.columns(2)
            datum = col1.date_input("D√°tum", datetime.today())
            osszeg = col2.number_input("√ñsszeg (Ft)", value=0)
            
            col3, col4 = st.columns(2)
            kategoria = col3.selectbox("Kateg√≥ria", ['fizetes', 'elelmiszer', 
                                        'lakber', 'kozlekedes', 'snack', 
                                        'etterem', 'mozi', 'kave', 'rezsi', 
                                        'megtakaritas', 'apro vasarlas', 'kutyu',
                                        'utazas', 'ruha', 'online rendeles',
                                        'reszveny_hozam', 'egyeb_hozam', 'sz√≥rakoz√°s']
                                       )

            # Profil √©s t√≠pus
            col5, col6 = st.columns(2)
            profil = user_df['profil'].iloc[-1] if current_user in df.user_id.unique() else None
            
            if pd.isna(profil):
                ossz_fizu = user_df[user_df.kategoria == 'fizetes']['osszeg'].sum()
                honapok = len(user_df.honap.unique())
                atlag_fizu = ossz_fizu / honapok
                ossz_koltes = abs(user_df[user_df.osszeg < 0]['osszeg'].sum())
                koltes_arany = ossz_koltes / ossz_fizu
                
                profil = 'arerzekeny' if koltes_arany < 0.70 else 'alacsony_jov' if atlag_fizu < 270_000\
                    else 'kozeposztaly' if atlag_fizu < 500_000 else 'magas_jov'
                
            profile_df = df[df.profil == profil].copy()
            
            tipus = col5.selectbox("T√≠pus", ['bevetel', 'alap', 'impulzus', 
                                             'vagy', 'megtakaritas', 'befektetes_hozam']
                                   )
            
            bev_kiad_tipus = st.selectbox("Bev√©tel/Kiad√°s t√≠pus", [
                "bevetel", "szukseglet", "luxus"
            ])
            
            leiras = st.text_input("Le√≠r√°s")
            platform = st.selectbox("Platform", ["utalas", "k√©szp√©nz", "k√°rtya", "web"])
            
            submitted = st.form_submit_button("Hozz√°ad√°s")
            
            if submitted:
                new_row = {
                    "datum": datum.strftime("%Y-%m-%d"),
                    "honap": datum.strftime("%Y-%m"),
                    "het": datum.isocalendar()[1],
                    "nap_sorszam": datum.weekday(),
                    "tranzakcio_id": f"{st.session_state.selected_user}_{datum.strftime('%Y%m%d')}_{int(time.time())}",
                    "osszeg": osszeg if bev_kiad_tipus == "bevetel" else -abs(osszeg),
                    "kategoria": kategoria,
                    "user_id": st.session_state.selected_user,
                    "profil": profil,
                    "tipus": tipus,
                    "leiras": leiras,
                    "forras": "user",
                    "ismetlodo": False,
                    "fix_koltseg": kategoria in ["lakber", "rezsi"],
                    "bev_kiad_tipus": bev_kiad_tipus,
                    "platform": platform,
                    "helyszin": "Egy√©b",
                    "deviza": "HUF",
                    "cimke": "",
                    "celhoz_kotott": False,
                    "balance": 0,
                    "reszvenyek": 0,
                    "egyeb_befektetes": 0,
                    "assets": 0
                }
                
                # Balance sz√°m√≠t√°s - CSAK AZ ADOTT FELHASZN√ÅL√ì ADATAIBAN
                if not user_df.empty:
                    last_row = user_df.iloc[-1]
                    new_row["balance"] = last_row["balance"] + new_row["osszeg"]
                    new_row["assets"] = last_row["assets"] + new_row["osszeg"]
                else:
                    new_row["balance"] = new_row["osszeg"]
                    new_row["assets"] = new_row["osszeg"]
                
                # √öj sor hozz√°ad√°sa az eredeti DF-hez
                df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
                save_data(df)
                
                # Session state friss√≠t√©se √©s √∫jrat√∂lt√©s
                st.success("Tranzakci√≥ sikeresen hozz√°adva!")
                st.experimental_rerun()

    # Adatok megtekint√©se - CSAK A KIV√ÅLASZTOTT FELHASZN√ÅL√ì ADATAI
    if st.checkbox(f"Adatok megtekint√©se (Felhaszn√°l√≥ {st.session_state.selected_user})"):
        current_user_df = df[df["user_id"] == current_user]
        if not current_user_df.empty:
            st.dataframe(current_user_df)
        else:
            st.warning("Nincsenek tranzakci√≥k ehhez a felhaszn√°l√≥hoz.")

    # Elemz√©s szekci√≥ - CSAK A KIV√ÅLASZTOTT FELHASZN√ÅL√ìRA
    st.header(f"P√©nz√ºgyi Elemz√©s - Felhaszn√°l√≥ {st.session_state.selected_user}")
    
    if not df.empty and not user_df.empty:
        if st.button("Elemz√©s ind√≠t√°sa", type="primary"):
            with st.spinner("Elemz√©s folyamatban..."):
                elemzo = PenzugyiElemzo(df)
                jelent√©s = elemzo.generate_comprehensive_report(st.session_state.selected_user)
                
                # Eredm√©nyek megjelen√≠t√©se
                st.success("Elemz√©s k√©sz!")
                
                # Executive Summary
                st.subheader("üìä √ñsszefoglal√≥")
                exec_summary = jelent√©s["executive_summary"]
                st.write(f"**P√©nz√ºgyi eg√©szs√©g pontsz√°m:** {exec_summary.get('penzugyi_egeszseg_pontszam', 'N/A')}")
                st.write(f"**√Åltal√°nos √©rt√©kel√©s:** {exec_summary.get('altalanos_ertekeles', 'N/A')}")
                
                st.write("**F≈ë er≈ëss√©gek:**")
                for erosseg in exec_summary.get('fo_erosegek', []):
                    st.write(f"- {erosseg}")
                
                st.write("**F≈ë kih√≠v√°sok:**")
                for kihivas in exec_summary.get('fo_kihivasok', []):
                    st.write(f"- {kihivas}")
                
                st.write("**Legfontosabb aj√°nl√°sok:**")
                for ajanlas in exec_summary.get('legfontosabb_ajanlasok', []):
                    st.write(f"- {ajanlas}")
                
                # Cash Flow Elemz√©s
                st.subheader("üí∏ Cash Flow Elemz√©s")
                cash_flow = jelent√©s["cash_flow_elemzes"]
                
                st.write(f"**Havi √°tlagos sz√ºks√©glet kiad√°sok:** {cash_flow['burn_rate'].get('havi_atlag_szukseglet', 'N/A'):,.0f} Ft")
                st.write(f"**Havi √°tlagos luxus kiad√°sok:** {cash_flow['burn_rate'].get('havi_atlag_luxus', 'N/A'):,.0f} Ft")
                st.write(f"**Teljes burn rate:** {cash_flow['burn_rate'].get('total_burn_rate', 'N/A'):,.0f} Ft")
                
                st.write("**Runway elemz√©s:**")
                runway = cash_flow['runway'].get('runway_honapok', {})
                st.write(f"- Csak k√©szp√©nz: {runway.get('csak_keszpenz', 'N/A')} h√≥nap")
                st.write(f"- √ñsszes asset: {runway.get('osszes_asset', 'N/A')} h√≥nap")
                
                # Sp√≥rol√°si lehet≈ës√©gek
                st.subheader("üí° Sp√≥rol√°si Optimaliz√°ci√≥")
                sporolas = jelent√©s["sporolas_optimalizacio"]
                
                if 'pareto_analysis' in sporolas:
                    st.write(f"**Pareto elemz√©s (80/20 szab√°ly):**")
                    st.write(f"A kiad√°sok {sporolas['pareto_analysis'].get('pareto_arany_pct', 'N/A')}%-a {len(sporolas['pareto_analysis'].get('pareto_kategoriak', []))} kateg√≥ri√°b√≥l sz√°rmazik")
                    st.write("Top kateg√≥ri√°k:")
                    for kat in sporolas['pareto_analysis'].get('pareto_kategoriak', [])[:3]:
                        st.write(f"- {kat}")
                
                # Befektet√©si tan√°csok
                st.subheader("üìà Befektet√©si Tan√°csok")
                befektetes = jelent√©s["befektetesi_elemzes"]
                
                if 'portfolio_suggestions' in befektetes:
                    st.write("**Jelenlegi portf√≥li√≥ allok√°ci√≥:**")
                    for asset, pct in befektetes['portfolio_suggestions'].get('jelenlegi_allokaciok', {}).items():
                        st.write(f"- {asset}: {pct:.0f}%")
                    
                    st.write("**Javasolt portf√≥li√≥ allok√°ci√≥:**")
                    for asset, pct in befektetes['portfolio_suggestions'].get('javasolt_allokaciok', {}).items():
                        st.write(f"- {asset}: {pct:.0f}%")
                    
                    st.write("**Rebalancing javaslatok:**")
                    for action in befektetes['portfolio_suggestions'].get('rebalancing_actions', []):
                        st.write(f"- {action}")
    else:
        st.warning("Nincs el√©g adat az elemz√©shez. K√©rj√ºk, adj hozz√° √∫j tranzakci√≥kat.")
     
    eredmenyek = run_user_eda(df, current_user)        
    # Elemz√©s eredm√©nyeinek megjelen√≠t√©se
    st.header(f"P√©nz√ºgyi Elemz√©s - Felhaszn√°l√≥ {eredmenyek['user_id']}")
    
    # Dashboard gener√°l√°sa
    dashboard_fig = UserFinancialEDA(df)._create_user_dashboard(
        user_data=user_df,
        profile_data=profile_df,
        user_profile=profil
    )
    
    # Dashboard megjelen√≠t√©se
    st.subheader("üìà P√©nz√ºgyi Dashboard")
    st.pyplot(dashboard_fig)

    # 1. Alapadatok
    with st.expander("üìå Alapadatok"):
        col1, col2, col3 = st.columns(3)
        col1.metric("Profil", eredmenyek['profile'])
        col2.metric("Id≈ëszak", f"{eredmenyek['time_period']['start']} - {eredmenyek['time_period']['end']}")
        col3.metric("Tranzakci√≥k sz√°ma", eredmenyek['transaction_count'])
    
    # 2. Alap statisztik√°k
    st.subheader("üìä Alap statisztik√°k")
    cols = st.columns(4)
    cols[0].metric("√ñsszes bev√©tel", f"{eredmenyek['basic_stats']['user_income']:,.0f} Ft")
    cols[1].metric("√ñsszes kiad√°s", f"{eredmenyek['basic_stats']['user_expenses']:,.0f} Ft")
    cols[2].metric("Nett√≥", f"{eredmenyek['basic_stats']['user_net']:,.0f} Ft")
    cols[3].metric("Megtakar√≠t√°si r√°ta", f"{eredmenyek['basic_stats']['user_savings_rate']:.1f}%")
    
    # Benchmark adatok
    with st.expander("Benchmark √∂sszehasonl√≠t√°s"):
        st.write(f"**Hasonl√≥ profil √°tlag j√∂vedelem:** {eredmenyek['basic_stats']['benchmark_income']:,.0f} Ft")
        st.write(f"**Hasonl√≥ profil √°tlag megtakar√≠t√°si r√°ta:** {eredmenyek['basic_stats']['benchmark_savings_rate']:.1f}%")
        st.write(f"**J√∂vedelem rangsor:** Top {eredmenyek['basic_stats']['user_rank_income']}%")
        st.write(f"**Megtakar√≠t√°s rangsor:** Top {eredmenyek['basic_stats']['user_rank_savings']}%")
    
    # 3. Cashflow elemz√©s
    st.subheader("üí∏ Cashflow elemz√©s")
    st.line_chart(pd.DataFrame.from_dict(eredmenyek['cashflow']['monthly_flow'], orient='index', columns=['Havi nett√≥']))
    st.write(f"**Trend:** {eredmenyek['cashflow']['trend_msg']}")
    
    # 4. Kiad√°si mint√°k
    st.subheader("üßÆ Kiad√°si mint√°k")
    cols = st.columns(3)
    cols[0].metric("Fix k√∂lts√©gek", f"{eredmenyek['spending_patterns']['fixed_costs']:,.0f} Ft", 
                   f"{eredmenyek['spending_patterns']['fixed_ratio']:.1f}%")
    cols[1].metric("V√°ltoz√≥ k√∂lts√©gek", f"{eredmenyek['spending_patterns']['variable_costs']:,.0f} Ft",
                   f"{eredmenyek['spending_patterns']['variable_ratio']:.1f}%")
    cols[2].metric("Impulzusv√°s√°rl√°sok", f"{eredmenyek['spending_patterns']['user_impulse_pct']:.1f}%",
                   f"profil √°tlag: {eredmenyek['spending_patterns']['profile_impulse_pct']:.1f}%")
    
    # 5. Kateg√≥ria elemz√©s
    st.subheader("üè∑Ô∏è Kateg√≥ria elemz√©s")
    top_cats = eredmenyek['category_analysis']['top_category']
    for rank in sorted(top_cats.keys()):
        cat = top_cats[rank]
        st.progress(cat['percentage']/100, 
                    text=f"{rank}. {cat['name']}: {cat['amount']:,.0f} Ft ({cat['percentage']:.1f}%)")
    
    if eredmenyek['category_analysis']['missing_essentials']:
        st.warning("Hi√°nyz√≥ alapkateg√≥ri√°k: " + ", ".join(eredmenyek['category_analysis']['missing_essentials']))
    
    # 6. Id≈ëbeli elemz√©s
    st.subheader("‚è∞ Id≈ëbeli mint√°k")
    week_data = eredmenyek['temporal_analysis']['weekly_spending']
    st.bar_chart(pd.DataFrame.from_dict(week_data, orient='index', columns=['Kiad√°s']))
    cols = st.columns(2)
    cols[0].metric("Legt√∂bb kiad√°s", f"{eredmenyek['temporal_analysis']['max_day']['name']}",
                   f"{eredmenyek['temporal_analysis']['max_day']['amount']:,.0f} Ft")
    cols[1].metric("Legkevesebb kiad√°s", f"{eredmenyek['temporal_analysis']['min_day']['name']}",
                   f"{eredmenyek['temporal_analysis']['min_day']['amount']:,.0f} Ft")
    
    # 7. Kock√°zatelemz√©s
    st.subheader("‚ö†Ô∏è Kock√°zatelemz√©s")
    risk = eredmenyek['risk_analysis']
    st.write(f"**Kock√°zati szint:** {risk['risk_level']}")
    st.write(risk['risk_msg'])
    st.write(f"Fix k√∂lts√©gek/j√∂vedelem ar√°ny: {risk['fixed_ratio']:.1f}%")
    
    # 8. Aj√°nl√°sok
    st.subheader("üí° Javaslatok")
    for rec in eredmenyek['recommendations']:
        st.write(f"- {rec}")