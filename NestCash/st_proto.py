import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import time
from PenzugyiElemzo import PenzugyiElemzo
from UserFinancialEDA import UserFinancialEDA, run_user_eda
from MLinsight import MLinsight

# Adatb√°zis kezel√©se
def load_data():
    try:
        return pd.read_csv("szintetikus_tranzakciok.csv")
    except:
        return pd.DataFrame(columns=[
            "datum", "honap", "het", "nap_sorszam", "tranzakcio_id", 
            "osszeg", "kategoria", "user_id", "profil", "tipus", 
            "leiras", "forras", "ismetlodo", "fix_koltseg", 
            "bev_kiad_tipus", "platform", "helyszin", "deviza", 
            "cimke", "celhoz_kotott", "balance", "reszvenyek", 
            "egyeb_befektetes", "assets"
        ])

def save_data(df):
    df.to_csv("szintetikus_tranzakciok.csv", index=False)

# Streamlit alkalmaz√°s
st.title("üí∞ NestCash protot√≠pus")
st.subheader("Tranzakci√≥k bevitele √©s elemz√©s")

# Adatok bet√∂lt√©se
df = load_data()

# Session state inicializ√°l√°sa
if 'selected_user' not in st.session_state:
    st.session_state.selected_user = None

# User kiv√°laszt√°sa
if not df.empty:
    available_users = df["user_id"].unique().tolist()
else:
    available_users = []

# Ha nincs m√©g felhaszn√°l√≥, lehet≈ës√©g √∫j l√©trehoz√°s√°ra
if not available_users:
    st.info("Nincsenek m√©g felhaszn√°l√≥k az adatb√°zisban. K√©rj√ºk, hozzon l√©tre egy √∫j felhaszn√°l√≥t.")
    new_user_id = st.number_input("√öj felhaszn√°l√≥ ID", min_value=1, value=1)
    if st.button("Felhaszn√°l√≥ l√©trehoz√°sa"):
        st.session_state.selected_user = new_user_id
        st.success(f"Felhaszn√°l√≥ {new_user_id} l√©trehozva! Most m√°r hozz√°adhat tranzakci√≥kat.")
else:
    # User kiv√°laszt√°sa
    selected_user = st.selectbox(
        "V√°laszd ki a felhaszn√°l√≥dat", 
        available_users,
        index=available_users.index(st.session_state.selected_user) if st.session_state.selected_user else 0
    )
    
    # Session state friss√≠t√©se
    if selected_user != st.session_state.selected_user:
        st.session_state.selected_user = selected_user
        st.rerun()
    
    st.success(f"Bejelentkezve mint: Felhaszn√°l√≥ {st.session_state.selected_user}")

# Csak akkor folytatjuk, ha van kiv√°lasztott felhaszn√°l√≥
if st.session_state.selected_user is not None:
    current_user = st.session_state.selected_user
    # Az aktu√°lis felhaszn√°l√≥ adatainak kinyer√©se
    user_df = df[df["user_id"] == current_user]
    
    profil = user_df['profil'].iloc[-1] if current_user in df.user_id.unique() else None
    if pd.isna(profil):
        ossz_fizu = user_df[user_df.kategoria == 'fizetes']['osszeg'].sum()
        honapok = len(user_df.honap.unique())
        atlag_fizu = ossz_fizu / honapok
        ossz_koltes = abs(user_df[user_df.osszeg < 0]['osszeg'].sum())
        koltes_arany = ossz_koltes / ossz_fizu
        
        profil = 'arerzekeny' if koltes_arany < 0.70 else 'alacsony_jov' if atlag_fizu < 270_000\
            else 'kozeposztaly' if atlag_fizu < 500_000 else 'magas_jov'
    profile_df = df[df.profil == profil].copy()
    
    balance = user_df['balance'].iloc[-1]
    reszvenyek = user_df['reszvenyek'].iloc[-1]
    egyeb_befektetes = user_df['egyeb_befektetes'].iloc[-1]
    
    cols = st.columns(3)
    cols[0].metric("K√©szp√©nz", f"{balance:,.0f}Ft")
    cols[1].metric("R√©szv√©nyek", f"{reszvenyek:,.0f}Ft")
    cols[2].metric("Egy√©b befektet√©s", f"{egyeb_befektetes:,.0f}Ft")
    
    # Sz√°ml√°k k√∂zti p√©nzmozgat√°s
    with st.expander(f"P√©nz mozgat√°sa sz√°ml√°k k√∂z√∂tt (Felhaszn√°l√≥ {current_user})"):
        with st.form("szamlak_kozott"):
            col1, col2 = st.columns(2)
            forras = col1.selectbox("Forr√°s sz√°mla", ["balance", "reszvenyek", "egyeb_befektetes"])
            cel = col2.selectbox("C√©l sz√°mla", ["balance", "reszvenyek", "egyeb_befektetes"])
            osszeg = st.number_input("√ñsszeg (Ft)", min_value=0, value=0)
            datum = st.date_input("D√°tum", datetime.today())
            
            submitted = st.form_submit_button("√Åtutal√°s")
            
            if submitted and forras != cel:
                # Forr√°s sz√°mla cs√∂kkent√©se
                new_row = {
                    "datum": datum.strftime("%Y-%m-%d"),
                    "honap": datum.strftime("%Y-%m"),
                    "het": datum.isocalendar()[1],
                    "nap_sorszam": datum.weekday(),
                    "tranzakcio_id": f"{current_user}_{datum.strftime('%Y%m%d')}_{int(time.time())}_from",
                    "osszeg": 0,
                    "kategoria": "szamlak_kozott",
                    "user_id": current_user,
                    "profil": profil,
                    "tipus": "megtakaritas",
                    "leiras": f"{osszeg}Ft ({forras} ‚Üí {cel})",
                    "forras": "internal_transfer",
                    "ismetlodo": False,
                    "fix_koltseg": False,
                    "bev_kiad_tipus": "szukseglet",
                    "platform": "utalas",
                    "helyszin": "Egy√©b",
                    "deviza": "HUF",
                    "cimke": "",
                    "celhoz_kotott": False,
                    forras: user_df[forras].iloc[-1] - osszeg,
                    cel: user_df[cel].iloc[-1] + osszeg,
                    "assets": user_df["assets"].iloc[-1]  # assets nem v√°ltozik
                }
                
                last_row = user_df.iloc[-1]
                # t√∂bbi sz√°mla egyenlege v√°ltozatlan
                for col in user_df.columns:
                    if col not in new_row.keys():
                        new_row[col] = last_row[col]
                
                # Mindk√©t sor hozz√°ad√°sa
                df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
                save_data(df)
                st.success("P√©nzmozgat√°s sikeresen r√∂gz√≠tve!")
                st.rerun()

            elif submitted and forras == cel:
                st.error("A forr√°s √©s c√©l sz√°mla nem lehet ugyanaz!")
    
    # √öj adat bevitele - CSAK A KIV√ÅLASZTOTT FELHASZN√ÅL√ìHOZ
    with st.expander(f"‚ûï √öj tranzakci√≥ hozz√°ad√°sa (Felhaszn√°l√≥ {current_user})"):
        with st.form("uj_tranzakcio"):
            col1, col2 = st.columns(2)
            datum = col1.date_input("D√°tum", datetime.today())
            osszeg = col2.number_input("√ñsszeg (Ft)", value=0)
            
            col3, col4 = st.columns(2)
            kategoria = col3.selectbox("Kateg√≥ria", ['fizetes', 'elelmiszer', 
                                        'lakber', 'kozlekedes', 'snack', 
                                        'etterem', 'mozi', 'kave', 'rezsi', 
                                        'megtakaritas', 'apro vasarlas', 'kutyu',
                                        'utazas', 'ruha', 'online rendeles',
                                        'reszveny_hozam', 'egyeb_hozam', 'sz√≥rakoz√°s']
                                       )

            # Profil √©s t√≠pus
            col5, col6 = st.columns(2)
            
            tipus = col5.selectbox("T√≠pus", ['bevetel', 'alap', 'impulzus', 
                                             'vagy', 'megtakaritas', 'befektetes_hozam']
                                   )
            
            bev_kiad_tipus = st.selectbox("Bev√©tel/Kiad√°s t√≠pus", [
                "bevetel", "szukseglet", "luxus"
            ])
            
            leiras = st.text_input("Le√≠r√°s")
            platform = st.selectbox("Platform", ["utalas", "k√©szp√©nz", "k√°rtya", "web"])
            
            submitted = st.form_submit_button("Hozz√°ad√°s")
            
            if submitted:
                new_row = {
                    "datum": datum.strftime("%Y-%m-%d"),
                    "honap": datum.strftime("%Y-%m"),
                    "het": datum.isocalendar()[1],
                    "nap_sorszam": datum.weekday(),
                    "tranzakcio_id": f"{current_user}_{datum.strftime('%Y%m%d')}_{int(time.time())}",
                    "osszeg": osszeg if bev_kiad_tipus == "bevetel" else -abs(osszeg),
                    "kategoria": kategoria,
                    "user_id": current_user,
                    "profil": profil,
                    "tipus": tipus,
                    "leiras": leiras,
                    "forras": "user",
                    "ismetlodo": False,
                    "fix_koltseg": kategoria in ["lakber", "rezsi"],
                    "bev_kiad_tipus": bev_kiad_tipus,
                    "platform": platform,
                    "helyszin": "Egy√©b",
                    "deviza": "HUF",
                    "cimke": "",
                    "celhoz_kotott": False,
                    "balance": 0,
                    "assets": 0
                }
                
                # Balance sz√°m√≠t√°s - CSAK AZ ADOTT FELHASZN√ÅL√ì ADATAIBAN
                if not user_df.empty:
                    last_row = user_df.iloc[-1]
                    new_row["balance"] = last_row["balance"] + new_row["osszeg"]
                    new_row["assets"] = last_row["assets"] + new_row["osszeg"]
                    new_row["reszvenyek"] = last_row["reszvenyek"]
                    new_row["egyeb_befektetes"] = last_row["egyeb_befektetes"]
                else:
                    new_row["balance"] = new_row["osszeg"]
                    new_row["assets"] = new_row["osszeg"]
                    new_row["reszvenyek"] = 0
                    new_row["egyeb_befektetes"] = 0
                
                # √öj sor hozz√°ad√°sa az eredeti DF-hez
                df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
                save_data(df)
                
                # Session state friss√≠t√©se √©s √∫jrat√∂lt√©s
                st.success("Tranzakci√≥ sikeresen hozz√°adva!")
                st.rerun()

    # Adatok megtekint√©se - CSAK A KIV√ÅLASZTOTT FELHASZN√ÅL√ì ADATAI
    if st.checkbox(f"Nyers adatok megtekint√©se (Felhaszn√°l√≥ {current_user})"):
        current_user_df = df[df["user_id"] == current_user]
        if not current_user_df.empty:
            st.dataframe(current_user_df)
        else:
            st.warning("Nincsenek tranzakci√≥k ehhez a felhaszn√°l√≥hoz.")

    # Elemz√©s szekci√≥ - CSAK A KIV√ÅLASZTOTT FELHASZN√ÅL√ìRA
    st.header(f"P√©nz√ºgyek Elemz√©se (Felhaszn√°l√≥ {current_user})")
    
    if not df.empty and not user_df.empty:
        eredmenyek = run_user_eda(df, current_user)
        elemzo = PenzugyiElemzo(df)
        jelent√©s = elemzo.generate_comprehensive_report(current_user)
        ml_insight = MLinsight(df, current_user)
        
        honapok = len(user_df.honap.unique())
        with st.expander("P√©nz√ºgyek elemz√©se"):
            # 1. Alapadatok √©s √∂sszefoglal√≥
            st.subheader("üìå Alapadatok")
            st.metric("Id≈ëszak", f"{eredmenyek['time_period']['start']} - {eredmenyek['time_period']['end']}")
            
            # Executive Summary
            st.subheader("üìä √ñsszefoglal√≥")
            exec_summary = jelent√©s["executive_summary"]
            st.write(f"**P√©nz√ºgyi eg√©szs√©g pontsz√°m:** {exec_summary.get('penzugyi_egeszseg_pontszam', 'N/A')}")
            st.write(f"**√Åltal√°nos √©rt√©kel√©s:** {exec_summary.get('altalanos_ertekeles', 'N/A')}")
            
            # 2. Bev√©teli elemz√©s
            st.subheader("üí∞ Bev√©teli statisztik√°k")
            col1, col2 = st.columns(2)
            col1.metric("√Åtlag havi bev√©tel", f"{eredmenyek['basic_stats']['user_income']/honapok:,.0f} Ft",
                        f"hasonl√≥ profil √°tlag: {eredmenyek['basic_stats']['benchmark_income']/honapok:,.0f} Ft")
            col2.metric("J√∂vedelem rangsor", f"Top {eredmenyek['basic_stats']['user_rank_income']:.1f}%")
            
            # 3. K√∂lts√©g elemz√©s
            st.subheader("üßÆ Kiad√°si elemz√©s")
            col1, col2 = st.columns(2)
            col1.metric("√Åtlag havi kiad√°s", f"{eredmenyek['basic_stats']['user_expenses']/honapok:,.0f} Ft")
            col2.metric("Tranzakci√≥k sz√°ma (√∂sszes)", eredmenyek['transaction_count'])
            
            # Kiad√°si mint√°k
            st.subheader("üìä Kiad√°si mint√°k")
            col1, col2 = st.columns(2)
            col1.metric("Fix k√∂lts√©gek havonta", f"{eredmenyek['spending_patterns']['fixed_costs']/honapok:,.0f} Ft", 
                           f"{eredmenyek['spending_patterns']['fixed_ratio']:.1f}%")
            col2.metric("V√°ltoz√≥ k√∂lts√©gek havonta", f"{eredmenyek['spending_patterns']['variable_costs']/honapok:,.0f} Ft",
                           f"{eredmenyek['spending_patterns']['variable_ratio']:.1f}%")
            col3, col4 = st.columns(2)
            col3.metric("Fix k√∂lts√©geid ar√°nya", f"{ml_insight['fix_cost']['fix_user']:.1%}",
                      f"hasonl√≥ profil √°tlag: {ml_insight['fix_cost']['fix_benchmark']:.1%}")
            
            col4.metric("Impulzusv√°s√°rl√°sok", f"{eredmenyek['spending_patterns']['user_impulse_pct']:.1f}%",
                           f"profil √°tlag: {eredmenyek['spending_patterns']['profile_impulse_pct']:.1f}%")
            
            # Kateg√≥ria elemz√©s
            st.subheader("üè∑Ô∏è Kateg√≥ria elemz√©s")
            top_cats = eredmenyek['category_analysis']['top_category']
            for rank in sorted(top_cats.keys()):
                cat = top_cats[rank]
                st.progress(cat['percentage']/100, 
                            text=f"{rank}. {cat['name']}: {cat['amount']:,.0f} Ft ({cat['percentage']:.1f}%)")
            
            if eredmenyek['category_analysis']['missing_essentials']:
                st.warning("Hi√°nyz√≥ alapkateg√≥ri√°k: " + ", ".join(eredmenyek['category_analysis']['missing_essentials']))
            
            # Id≈ëbeli mint√°k
            st.subheader("‚è∞ Id≈ëbeli mint√°k")
            week_data = eredmenyek['temporal_analysis']['weekly_spending']
            nap_rend = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
            rendezett_heti_adat = {nap: week_data.get(nap, 0) for nap in nap_rend}
            st.bar_chart(pd.DataFrame.from_dict(rendezett_heti_adat, orient='index', columns=['Kiad√°s']))
            cols = st.columns(2)
            cols[0].metric("Legt√∂bb kiad√°s", f"{eredmenyek['temporal_analysis']['max_day']['name']}",
                           f"{eredmenyek['temporal_analysis']['max_day']['amount']:,.0f} Ft")
            cols[1].metric("Legkevesebb kiad√°s", f"{eredmenyek['temporal_analysis']['min_day']['name']}",
                           f"{eredmenyek['temporal_analysis']['min_day']['amount']:,.0f} Ft")
            
            # 4. Megtakar√≠t√°si elemz√©s
            st.subheader("üíµ Megtakar√≠t√°si statisztik√°k")
            col1, col2 = st.columns(2)
            col1.metric("Megtakar√≠t√°si r√°ta", f"{eredmenyek['basic_stats']['user_savings_rate']:.1f}%", 
                        f"hasonl√≥ profil √°tlag: {eredmenyek['basic_stats']['benchmark_savings_rate']:.1f}%")
            col2.metric("Megtakar√≠t√°s rangsor", f"Top {eredmenyek['basic_stats']['user_rank_savings']:.1f}%")
            
            # 5. Cashflow elemz√©s
            st.subheader("üí∏ Cashflow elemz√©s")
            st.line_chart(pd.DataFrame.from_dict(eredmenyek['cashflow']['monthly_flow'], orient='index', columns=['Havi nett√≥']))
            st.write(f"**Trend:** {eredmenyek['cashflow']['trend_msg']}")
            
            # Cash Flow Elemz√©s r√©szletek
            st.subheader("üìâ Cash Flow Elemz√©s r√©szletek")
            cash_flow = jelent√©s["cash_flow_elemzes"]
            st.write(f"**Havi √°tlagos sz√ºks√©glet kiad√°sok:** {cash_flow['burn_rate'].get('havi_atlag_szukseglet', 'N/A'):,.0f} Ft")
            st.write(f"**Havi √°tlagos luxus kiad√°sok:** {cash_flow['burn_rate'].get('havi_atlag_luxus', 'N/A'):,.0f} Ft")
            st.write(f"**Teljes havi √°tlagos kiad√°sok:** {cash_flow['burn_rate'].get('total_burn_rate', 'N/A'):,.0f} Ft")
            
            st.write("**Mennyi ideig √©ln√©l meg a jelenlegi vagyonoddal?**")
            runway = cash_flow['runway'].get('runway_honapok', {})
            st.write(f"- Csak k√©szp√©nz: {runway.get('csak_keszpenz', 'N/A')} h√≥nap")
            st.write(f"- √ñsszes asset: {runway.get('osszes_asset', 'N/A')} h√≥nap")
            st.warning("Aj√°nlott tartal√©k: 3-6 h√≥nap")
            
            # 6. Sp√≥rol√°si lehet≈ës√©gek
            st.subheader("üí° Sp√≥rol√°si Optimaliz√°ci√≥")
            sporolas = jelent√©s["sporolas_optimalizacio"]
            
            if 'pareto_analysis' in sporolas:
                st.write("**Pareto elemz√©s (80/20 szab√°ly):**")
                kat_darab = len(sporolas['pareto_analysis'].get('pareto_kategoriak', []))
                st.write(f"A kiad√°sok {sporolas['pareto_analysis'].get('pareto_arany_pct', 'N/A')}%-a {kat_darab} kateg√≥ri√°b√≥l sz√°rmazik")
                for kat in sporolas['pareto_analysis'].get('pareto_kategoriak', [])[:kat_darab]:
                    st.write(f"- {kat}")
            
            # 7. Befektet√©si tan√°csok
            st.subheader("üìà Befektet√©si Tan√°csok")
            befektetes = jelent√©s["befektetesi_elemzes"]
            
            if 'portfolio_suggestions' in befektetes:
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**Jelenlegi portf√≥li√≥ allok√°ci√≥:**")
                    for asset, pct in befektetes['portfolio_suggestions'].get('jelenlegi_allokaciok', {}).items():
                        st.write(f"- {asset}: {pct:.0f}%")
                
                with col2:
                    st.write("**Javasolt portf√≥li√≥ allok√°ci√≥:**")
                    for asset, pct in befektetes['portfolio_suggestions'].get('javasolt_allokaciok', {}).items():
                        st.write(f"- {asset}: {pct:.0f}%")
                
                st.write("**Elad√°si √©s v√©teli javaslatok:**")
                for action in befektetes['portfolio_suggestions'].get('rebalancing_actions', []):
                    st.write(f"- {action}")
            
            # 8. ML Insight elemz√©s            
            st.subheader("ü§ñ G√©pi tanul√°s alap√∫ elemz√©sek")
            
            st.subheader("Kock√°zatelemz√©s")
            if "nem ker√ºlsz m√≠nuszba" in ml_insight['risk_msg']:
                st.success(ml_insight['risk_msg'])
            else:
                st.warning(ml_insight['risk_msg'])
            
            st.subheader("Mozg√≥√°tlagok")
            col1, col2, col3 = st.columns(3)
            col1.metric("7 napos √°tlagk√∂lt√©s", f"{abs(ml_insight['rolling_avg']['roll7']):,.0f} Ft")
            col2.metric("30 napos √°tlagk√∂lt√©s", f"{abs(ml_insight['rolling_avg']['roll30']):,.0f} Ft")
            col3.metric("90 napos √°tlagk√∂lt√©s", f"{abs(ml_insight['rolling_avg']['roll90']):,.0f} Ft")
            
            st.subheader("K√∂lt√©si diverzit√°s")
            st.metric("Diverzit√°si indexed", f"{ml_insight['diversity']['div_user']:.4f}",
                      f"hasonl√≥ profil √°tlag: {ml_insight['diversity']['div_benchmark']:.4f}")
            
            st.subheader("Trendek")
            st.metric("Megtakar√≠t√°s v√°ltoz√°sa", f"{ml_insight['savings_trend_pp']:.1%}pont")
            
            st.metric("Ilyen helyzetben √°tlagosan el√©rhet≈ë vagyon", f"{ml_insight['suggested_assets']:,.0f} Ft")
            
            # 9. Aj√°nl√°sok
            st.subheader("üí° Javaslatok")
            for rec in eredmenyek['recommendations']:
                st.write(f"- {rec}")
    else:
        st.warning("Nincs el√©g adat az elemz√©shez. K√©rj√ºk, adj hozz√° √∫j tranzakci√≥kat.")