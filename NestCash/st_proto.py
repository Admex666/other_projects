import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import time
import hashlib
import os
import json
from PenzugyiElemzo import PenzugyiElemzo
from UserFinancialEDA import UserFinancialEDA, run_user_eda
from MLinsight import MLinsight

# Adatb√°zis kezel√©se
def load_data():
    try:
        return pd.read_csv("szintetikus_tranzakciok.csv")
    except:
        return pd.DataFrame(columns=[
            "datum", "honap", "het", "nap_sorszam", "tranzakcio_id", 
            "osszeg", "kategoria", "user_id", "profil", "tipus", 
            "leiras", "forras", "ismetlodo", "fix_koltseg", 
            "bev_kiad_tipus", "platform", "helyszin", "deviza", 
            "cimke", "celhoz_kotott", "likvid", "befektetes", 
            "megtakaritas", "assets"
        ])

def save_data(df):
    df.to_csv("szintetikus_tranzakciok.csv", index=False)

# Streamlit alkalmaz√°s
st.title("üí∞ NestCash protot√≠pus")

# Adatok bet√∂lt√©se
df = load_data()

#%% Registration, sign-in
# Adjuk hozz√° az importokhoz
import hashlib
import os

# Felhaszn√°l√≥k bet√∂lt√©se
def load_users():
    try:
        return pd.read_csv("users.csv")
    except:
        return pd.DataFrame(columns=["user_id", "username", "password", "email", "registration_date"])

# Felhaszn√°l√≥ ment√©se
def save_users(users_df):
    users_df.to_csv("users.csv", index=False)

# Jelsz√≥ hash-el√©se
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# Felhaszn√°l√≥ authentik√°l√°sa
def authenticate_user(username, password):
    users_df = load_users()
    hashed_pw = hash_password(password)
    user = users_df[(users_df["username"] == username) & (users_df["password"] == hashed_pw)]
    return user.iloc[0] if not user.empty else None

# Session state inicializ√°l√°sa
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.current_user = None
    st.session_state.user_id = None
    st.session_state.username = None
 
# Fel√ºlet
# Ha nincs bejelentkezve felhaszn√°l√≥
if not st.session_state.logged_in:
    tab1, tab2 = st.tabs(["Bejelentkez√©s", "Regisztr√°ci√≥"])
    
    with tab1:
        with st.form("Bejelentkez√©s"):
            username = st.text_input("Felhaszn√°l√≥n√©v")
            password = st.text_input("Jelsz√≥", type="password")
            submitted = st.form_submit_button("Bejelentkez√©s")
            
            if submitted:
                user = authenticate_user(username, password)
                if user is not None:
                    st.session_state.logged_in = True
                    st.session_state.current_user = user
                    st.session_state.user_id = user["user_id"]
                    st.session_state.username = user["username"]
                    st.success("Sikeres bejelentkez√©s!")
                    st.rerun()
                else:
                    st.error("Hib√°s felhaszn√°l√≥n√©v vagy jelsz√≥!")
    
    with tab2:
        with st.form("Regisztr√°ci√≥"):
            new_username = st.text_input("√öj felhaszn√°l√≥n√©v")
            new_password = st.text_input("√öj jelsz√≥", type="password")
            confirm_password = st.text_input("Jelsz√≥ meger≈ës√≠t√©se", type="password")
            email = st.text_input("E-mail c√≠m")
            submitted = st.form_submit_button("Regisztr√°ci√≥")
            
            if submitted:
                users_df = load_users()
                
                # Valid√°ci√≥k
                if new_password != confirm_password:
                    st.error("A jelszavak nem egyeznek!")
                elif new_username in users_df["username"].values:
                    st.error("Ez a felhaszn√°l√≥n√©v m√°r foglalt!")
                else:
                    # √öj user_id gener√°l√°sa
                    new_user_id = users_df["user_id"].max() + 1 if not users_df.empty else 1
                    
                    new_user = {
                        "user_id": new_user_id,
                        "username": new_username,
                        "password": hash_password(new_password),
                        "email": email,
                        "registration_date": datetime.now().strftime("%Y-%m-%d")
                    }
                    
                    users_df = pd.concat([users_df, pd.DataFrame([new_user])], ignore_index=True)
                    save_users(users_df)
                    
                    st.session_state.logged_in = True
                    st.session_state.current_user = new_user
                    st.session_state.user_id = new_user_id
                    st.session_state.username = new_username
                    username = new_username
                    
                    st.success("Sikeres regisztr√°ci√≥! Automatikusan bejelentkezt√©l.")
                    st.rerun()
    
    st.stop()  # Ne jelenjen meg a tartalom, ha nincs bejelentkezve
    
# Ha be van jelentkezve, jelen√≠ts√ºk meg a kijelentkez√©s gombot
if st.session_state.logged_in:
    current_user = st.session_state.user_id
    username = st.session_state.username
    st.success(f"Bejelentkezve mint: {username} (ID: {current_user})")
    
    # Kijelentkez√©s gomb
    if st.button("Kijelentkez√©s", key="logout_btn"):
        st.session_state.logged_in = False
        st.session_state.current_user = None
        st.session_state.user_id = None
        st.session_state.username = None
        st.success("Sikeresen kijelentkezt√©l!")
        st.rerun()

    #%% Az aktu√°lis felhaszn√°l√≥ adatainak kinyer√©se
    st.subheader("Tranzakci√≥k bevitele, sz√°ml√°k kezel√©se")
    
    user_df = df[df["user_id"] == current_user]
    
    if user_df.empty:
        likvid = 0
        befektetes = 0
        megtakaritas = 0
        profil = 'alap'  # Alap√©rtelmezett profil
    else:
        likvid = user_df['likvid'].iloc[-1]
        befektetes = user_df['befektetes'].iloc[-1]
        megtakaritas = user_df['megtakaritas'].iloc[-1]
        profil = user_df['profil'].iloc[-1]
    
    profil = user_df['profil'].iloc[-1] if current_user in df.user_id.unique() else None
    if pd.isna(profil):
        ossz_fizu = user_df[user_df.kategoria == 'fizetes']['osszeg'].sum()
        honapok = len(user_df.honap.unique())
        atlag_fizu = ossz_fizu / honapok
        ossz_koltes = abs(user_df[user_df.osszeg < 0]['osszeg'].sum())
        koltes_arany = ossz_koltes / ossz_fizu
        
        profil = 'arerzekeny' if koltes_arany < 0.70 else 'alacsony_jov' if atlag_fizu < 270_000\
            else 'kozeposztaly' if atlag_fizu < 500_000 else 'magas_jov'
    profile_df = df[df.profil == profil].copy()
    
    cols = st.columns(3)
    cols[0].metric("Likvid", f"{likvid:,.0f}Ft")
    cols[1].metric("Befektet√©sek", f"{befektetes:,.0f}Ft")
    cols[2].metric("Megtakar√≠t√°sok", f"{megtakaritas:,.0f}Ft")
    
    #%% Sz√°ml√°k k√∂zti p√©nzmozgat√°s, sz√°mlakezel√©s
    def load_accounts():
        try:
            with open("accounts.json", "r") as f:
                return json.load(f)
        except:
            return {}
    
    def save_accounts(accounts_dict):
        with open("accounts.json", "w") as f:
            json.dump(accounts_dict, f)
    
    def get_user_accounts(user_id):
        accounts = load_accounts()
        user_id_str = str(user_id)
        
        if user_id_str not in accounts:
            # Alap√©rtelmezett sz√°ml√°k l√©trehoz√°sa
            accounts[user_id_str] = {
                "likvid": {"foosszeg": 0},
                "befektetes": {"foosszeg": 0},
                "megtakaritas": {"foosszeg": 0}
            }
            save_accounts(accounts)
        
        return accounts[user_id_str]
    
    def update_account_balance(user_id, foszamla, alszamla, amount):
        accounts = load_accounts()
        user_id_str = str(user_id)
        
        if user_id_str not in accounts:
            accounts[user_id_str] = get_user_accounts(user_id)
        
        if foszamla not in accounts[user_id_str]:
            accounts[user_id_str][foszamla] = {}
        
        if alszamla not in accounts[user_id_str][foszamla]:
            accounts[user_id_str][foszamla][alszamla] = 0
        
        accounts[user_id_str][foszamla][alszamla] += amount
        save_accounts(accounts)
        return accounts[user_id_str][foszamla][alszamla]
    
    # Alsz√°ml√°k kezel√©se (az egyenlegek megjelen√≠t√©se ut√°n)
    with st.expander("üíº Sz√°ml√°k kezel√©se"):
        tab1, tab2, tab3 = st.tabs(["Alsz√°ml√°k", "Alsz√°ml√°k l√©trehoz√°sa", "P√©nzmozgat√°s sz√°ml√°k k√∂zt"])
        
        with tab2:
            with st.form("uj_alszamla"):
                foszamla = st.selectbox("F≈ësz√°mla", ["likvid", "befektetes", "megtakaritas"])
                alszamla_nev = st.text_input("Alsz√°mla neve")
                
                if st.form_submit_button("L√©trehoz√°s"):
                    user_accounts = get_user_accounts(current_user)
                    
                    if foszamla not in user_accounts:
                        user_accounts[foszamla] = {}
                    
                    if alszamla_nev in user_accounts[foszamla]:
                        st.error("Ez az alsz√°mla m√°r l√©tezik!")
                    else:
                        user_accounts[foszamla][alszamla_nev] = 0
                        accounts = load_accounts()
                        accounts[str(current_user)] = user_accounts
                        save_accounts(accounts)
                        st.success(f"Alsz√°mla l√©trehozva: {alszamla_nev} a {foszamla} alatt")
                        st.rerun()
        
        with tab1:
            user_accounts = get_user_accounts(current_user)
            st.write("### Alsz√°ml√°k √©s egyenlegek")
            
            for foszamla, alszamlak in user_accounts.items():
                st.write(f"**{foszamla.capitalize()}**")
                for alszamla, egyenleg in alszamlak.items():
                    st.write(f"- {alszamla}: {egyenleg:,.0f} Ft")
    
        # Sz√°ml√°k k√∂zti p√©nzmozgat√°s b≈ëv√≠t√©se alsz√°ml√°kkal
        with tab3:
            with st.form("szamlak_kozott"):
                col1, col2 = st.columns(2)
                
                # Forr√°s oldal
                with col1:
                    forras_foszamla = st.selectbox("Forr√°s f≈ësz√°mla", ["likvid", "befektetes", "megtakaritas"])
                    user_accounts = get_user_accounts(current_user)
                    forras_alszamlak = list(user_accounts.get(forras_foszamla, {}).keys())
                    forras_alszamla = st.selectbox("Forr√°s alsz√°mla", forras_alszamlak)
                
                # C√©l oldal
                with col2:
                    cel_foszamla = st.selectbox("C√©l f≈ësz√°mla", ["likvid", "befektetes", "megtakaritas"])
                    cel_alszamlak = list(user_accounts.get(cel_foszamla, {}).keys())
                    cel_alszamla = st.selectbox("C√©l alsz√°mla", cel_alszamlak)
                
                osszeg = st.number_input("√ñsszeg (Ft)", min_value=0, value=0)
                datum = st.date_input("D√°tum", datetime.today())
                
                submitted = st.form_submit_button("√Åtutal√°s")
                
                if submitted:
                    # Ellen≈ërz√©s
                    if forras_foszamla == cel_foszamla and forras_alszamla == cel_alszamla:
                        st.error("A forr√°s √©s c√©l sz√°mla nem lehet ugyanaz!")
                    else:
                        # Forr√°s sz√°mla friss√≠t√©se
                        update_account_balance(current_user, forras_foszamla, forras_alszamla, -osszeg)
                        # C√©l sz√°mla friss√≠t√©se
                        update_account_balance(current_user, cel_foszamla, cel_alszamla, osszeg)
                        
                        # F≈ësz√°ml√°k friss√≠t√©se
                        user_accounts = get_user_accounts(current_user)
                        likvid_osszeg = sum(user_accounts["likvid"].values())
                        befektetes_osszeg = sum(user_accounts["befektetes"].values())
                        megtakaritas_osszeg = sum(user_accounts["megtakaritas"].values())
                        
                        new_row = {
                            "datum": datum.strftime("%Y-%m-%d"),
                            "honap": datum.strftime("%Y-%m"),
                            "het": datum.isocalendar()[1],
                            "nap_sorszam": datum.weekday(),
                            "tranzakcio_id": f"{current_user}_{datum.strftime('%Y%m%d')}_{int(time.time())}_from",
                            "osszeg": 0,
                            "kategoria": "szamlak_kozott",
                            "user_id": current_user,
                            "profil": profil,
                            "tipus": "megtakaritas",
                            "leiras": f"{osszeg}Ft ({forras_alszamla} ‚Üí {cel_alszamla})",
                            "forras": "internal_transfer",
                            "ismetlodo": False,
                            "fix_koltseg": False,
                            "bev_kiad_tipus": "szukseglet",
                            "platform": "utalas",
                            "helyszin": "Egy√©b",
                            "deviza": "HUF",
                            "cimke": "",
                            "celhoz_kotott": False,
                            "likvid": likvid_osszeg,
                            "befektetes": befektetes_osszeg,
                            "megtakaritas": megtakaritas_osszeg,
                            "assets": user_df["assets"].iloc[-1]  # assets nem v√°ltozik
                        }
                        
                        # √öj sor hozz√°ad√°sa
                        df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
                        save_data(df)
                        st.success("P√©nzmozgat√°s sikeresen r√∂gz√≠tve!")
                        st.rerun()
    
    #%% √öj adat bevitele - CSAK A KIV√ÅLASZTOTT FELHASZN√ÅL√ìHOZ
    with st.expander("‚ûï √öj tranzakci√≥ hozz√°ad√°sa"):
        with st.form("uj_tranzakcio"):
            col1, col2 = st.columns(2)
            datum = col1.date_input("D√°tum", datetime.today())
            osszeg = col2.number_input("√ñsszeg (Ft)", value=0)
            
            col3, col4 = st.columns(2)
            kategoria = col3.selectbox("Kateg√≥ria", ['fizetes', 'elelmiszer', 
                                        'lakber', 'kozlekedes', 'snack', 
                                        'etterem', 'mozi', 'kave', 'rezsi', 
                                        'megtakaritas', 'apro vasarlas', 'kutyu',
                                        'utazas', 'ruha', 'online rendeles',
                                        'reszveny_hozam', 'egyeb_hozam', 'sz√≥rakoz√°s']
                                       )

            # Profil √©s t√≠pus
            col5, col6 = st.columns(2)
            
            tipus = col5.selectbox("T√≠pus", ['bevetel', 'alap', 'impulzus', 
                                             'vagy', 'megtakaritas', 'befektetes_hozam']
                                   )
            
            bev_kiad_tipus = st.selectbox("Bev√©tel/Kiad√°s t√≠pus", [
                "bevetel", "szukseglet", "luxus"
            ])
            
            # Sz√°mla kiv√°laszt√°sa
            foszamla = st.selectbox("F≈ësz√°mla", ["likvid", "befektetes", "megtakaritas"])
            user_accounts = get_user_accounts(current_user)
            alszamlak = list(user_accounts.get(foszamla, {}).keys())
            alszamla = st.selectbox("Alsz√°mla", alszamlak)
            
            leiras = st.text_input("Le√≠r√°s")
            platform = st.selectbox("Platform", ["utalas", "k√©szp√©nz", "k√°rtya", "web"])
            
            submitted = st.form_submit_button("Hozz√°ad√°s")
            
            if submitted:
                new_row = {
                    "datum": datum.strftime("%Y-%m-%d"),
                    "honap": datum.strftime("%Y-%m"),
                    "het": datum.isocalendar()[1],
                    "nap_sorszam": datum.weekday(),
                    "tranzakcio_id": f"{current_user}_{datum.strftime('%Y%m%d')}_{int(time.time())}",
                    "osszeg": osszeg if bev_kiad_tipus == "bevetel" else -abs(osszeg),
                    "kategoria": kategoria,
                    "user_id": current_user,
                    "profil": profil,
                    "tipus": tipus,
                    "leiras": leiras,
                    "forras": "user",
                    "ismetlodo": False,
                    "fix_koltseg": kategoria in ["lakber", "rezsi"],
                    "bev_kiad_tipus": bev_kiad_tipus,
                    "platform": platform,
                    "helyszin": "Egy√©b",
                    "deviza": "HUF",
                    "cimke": "",
                    "celhoz_kotott": False,
                    "likvid": 0,
                    "assets": 0
                }
                
                # Alsz√°mla egyenleg friss√≠t√©se
                new_balance = update_account_balance(current_user, foszamla, alszamla, new_row["osszeg"])
                
                # F≈ësz√°mla egyenlegek √∫jrasz√°mol√°sa
                user_accounts = get_user_accounts(current_user)
                likvid_osszeg = sum(user_accounts["likvid"].values())
                befektetes_osszeg = sum(user_accounts["befektetes"].values())
                megtakaritas_osszeg = sum(user_accounts["megtakaritas"].values())
                
                # F≈ësz√°mla √©rt√©kek be√°ll√≠t√°sa
                new_row["likvid"] = likvid_osszeg
                new_row["befektetes"] = befektetes_osszeg
                new_row["megtakaritas"] = megtakaritas_osszeg
                new_row["foszamla"] = foszamla
                new_row["alszamla"] = alszamla
                
                """
                # likvid sz√°m√≠t√°s - CSAK AZ ADOTT FELHASZN√ÅL√ì ADATAIBAN
                if not user_df.empty:
                    last_row = user_df.iloc[-1]
                    new_row["likvid"] = last_row["likvid"] + new_row["osszeg"]
                    new_row["assets"] = last_row["assets"] + new_row["osszeg"]
                    new_row["befektetes"] = last_row["befektetes"]
                    new_row["megtakaritas"] = last_row["megtakaritas"]
                else:
                    new_row["likvid"] = new_row["osszeg"]
                    new_row["assets"] = new_row["osszeg"]
                    new_row["befektetes"] = 0
                    new_row["megtakaritas"] = 0
                """
                # √öj sor hozz√°ad√°sa az eredeti DF-hez
                df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
                save_data(df)
                
                # Session state friss√≠t√©se √©s √∫jrat√∂lt√©s
                st.success("Tranzakci√≥ sikeresen hozz√°adva!")
                st.rerun()

    # Adatok megtekint√©se - CSAK A KIV√ÅLASZTOTT FELHASZN√ÅL√ì ADATAI
    if st.checkbox(f"Nyers adatok megtekint√©se"):
        current_user_df = df[df["user_id"] == current_user]
        if not current_user_df.empty:
            st.dataframe(current_user_df)
        else:
            st.warning("Nincsenek tranzakci√≥k ehhez a felhaszn√°l√≥hoz.")

    # Elemz√©s szekci√≥ - CSAK A KIV√ÅLASZTOTT FELHASZN√ÅL√ìRA
    st.header(f"P√©nz√ºgyek Elemz√©se")
    
    if not (len(df) < 20) and not (len(user_df) < 20):
        eredmenyek = run_user_eda(df, current_user)
        elemzo = PenzugyiElemzo(df)
        jelent√©s = elemzo.generate_comprehensive_report(current_user)
        ml_insight = MLinsight(df, current_user)
        
        honapok = len(user_df.honap.unique())
        with st.expander("P√©nz√ºgyek elemz√©se"):
            # 1. Alapadatok √©s √∂sszefoglal√≥
            st.subheader("üìå Alapadatok")
            st.metric("Id≈ëszak", f"{eredmenyek['time_period']['start']} - {eredmenyek['time_period']['end']}")
            
            # Executive Summary
            st.subheader("üìä √ñsszefoglal√≥")
            exec_summary = jelent√©s["executive_summary"]
            st.write(f"**P√©nz√ºgyi eg√©szs√©g pontsz√°m:** {exec_summary.get('penzugyi_egeszseg_pontszam', 'N/A')}")
            st.write(f"**√Åltal√°nos √©rt√©kel√©s:** {exec_summary.get('altalanos_ertekeles', 'N/A')}")
            
            # 2. Bev√©teli elemz√©s
            st.subheader("üí∞ Bev√©teli statisztik√°k")
            col1, col2 = st.columns(2)
            col1.metric("√Åtlag havi bev√©tel", f"{eredmenyek['basic_stats']['user_income']/honapok:,.0f} Ft",
                        f"hasonl√≥ profil √°tlag: {eredmenyek['basic_stats']['benchmark_income']/honapok:,.0f} Ft")
            col2.metric("J√∂vedelem rangsor", f"Top {eredmenyek['basic_stats']['user_rank_income']:.1f}%")
            
            # 3. K√∂lts√©g elemz√©s
            st.subheader("üßÆ Kiad√°si elemz√©s")
            col1, col2 = st.columns(2)
            col1.metric("√Åtlag havi kiad√°s", f"{eredmenyek['basic_stats']['user_expenses']/honapok:,.0f} Ft")
            col2.metric("Tranzakci√≥k sz√°ma (√∂sszes)", eredmenyek['transaction_count'])
            
            # Kiad√°si mint√°k
            st.subheader("üìä Kiad√°si mint√°k")
            col1, col2 = st.columns(2)
            col1.metric("Fix k√∂lts√©gek havonta", f"{eredmenyek['spending_patterns']['fixed_costs']/honapok:,.0f} Ft", 
                           f"{eredmenyek['spending_patterns']['fixed_ratio']:.1f}%")
            col2.metric("V√°ltoz√≥ k√∂lts√©gek havonta", f"{eredmenyek['spending_patterns']['variable_costs']/honapok:,.0f} Ft",
                           f"{eredmenyek['spending_patterns']['variable_ratio']:.1f}%")
            col3, col4 = st.columns(2)
            col3.metric("Fix k√∂lts√©geid ar√°nya", f"{ml_insight['fix_cost']['fix_user']:.1%}",
                      f"hasonl√≥ profil √°tlag: {ml_insight['fix_cost']['fix_benchmark']:.1%}")
            
            col4.metric("Impulzusv√°s√°rl√°sok", f"{eredmenyek['spending_patterns']['user_impulse_pct']:.1f}%",
                           f"profil √°tlag: {eredmenyek['spending_patterns']['profile_impulse_pct']:.1f}%")
            
            # Kateg√≥ria elemz√©s
            st.subheader("üè∑Ô∏è Kateg√≥ria elemz√©s")
            top_cats = eredmenyek['category_analysis']['top_category']
            for rank in sorted(top_cats.keys()):
                cat = top_cats[rank]
                st.progress(cat['percentage']/100, 
                            text=f"{rank}. {cat['name']}: {cat['amount']:,.0f} Ft ({cat['percentage']:.1f}%)")
            
            if eredmenyek['category_analysis']['missing_essentials']:
                st.warning("Hi√°nyz√≥ alapkateg√≥ri√°k: " + ", ".join(eredmenyek['category_analysis']['missing_essentials']))
            
            # Id≈ëbeli mint√°k
            st.subheader("‚è∞ Id≈ëbeli mint√°k")
            week_data = eredmenyek['temporal_analysis']['weekly_spending']
            nap_rend = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
            rendezett_heti_adat = {nap: week_data.get(nap, 0) for nap in nap_rend}
            st.bar_chart(pd.DataFrame.from_dict(rendezett_heti_adat, orient='index', columns=['Kiad√°s']))
            cols = st.columns(2)
            cols[0].metric("Legt√∂bb kiad√°s", f"{eredmenyek['temporal_analysis']['max_day']['name']}",
                           f"{eredmenyek['temporal_analysis']['max_day']['amount']:,.0f} Ft")
            cols[1].metric("Legkevesebb kiad√°s", f"{eredmenyek['temporal_analysis']['min_day']['name']}",
                           f"{eredmenyek['temporal_analysis']['min_day']['amount']:,.0f} Ft")
            
            # 4. Megtakar√≠t√°si elemz√©s
            st.subheader("üíµ Megtakar√≠t√°si statisztik√°k")
            col1, col2 = st.columns(2)
            col1.metric("Megtakar√≠t√°si r√°ta", f"{eredmenyek['basic_stats']['user_savings_rate']:.1f}%", 
                        f"hasonl√≥ profil √°tlag: {eredmenyek['basic_stats']['benchmark_savings_rate']:.1f}%")
            col2.metric("Megtakar√≠t√°s rangsor", f"Top {eredmenyek['basic_stats']['user_rank_savings']:.1f}%")
            
            # 5. Cashflow elemz√©s
            st.subheader("üí∏ Cashflow elemz√©s")
            st.line_chart(pd.DataFrame.from_dict(eredmenyek['cashflow']['monthly_flow'], orient='index', columns=['Havi nett√≥']))
            st.write(f"**Trend:** {eredmenyek['cashflow']['trend_msg']}")
            
            # Cash Flow Elemz√©s r√©szletek
            st.subheader("üìâ Cash Flow Elemz√©s r√©szletek")
            cash_flow = jelent√©s["cash_flow_elemzes"]
            st.write(f"**Havi √°tlagos sz√ºks√©glet kiad√°sok:** {cash_flow['burn_rate'].get('havi_atlag_szukseglet', 'N/A'):,.0f} Ft")
            st.write(f"**Havi √°tlagos luxus kiad√°sok:** {cash_flow['burn_rate'].get('havi_atlag_luxus', 'N/A'):,.0f} Ft")
            st.write(f"**Teljes havi √°tlagos kiad√°sok:** {cash_flow['burn_rate'].get('total_burn_rate', 'N/A'):,.0f} Ft")
            
            st.write("**Mennyi ideig √©ln√©l meg a jelenlegi vagyonoddal?**")
            runway = cash_flow['runway'].get('runway_honapok', {})
            st.write(f"- Csak k√©szp√©nz: {runway.get('csak_keszpenz', 'N/A')} h√≥nap")
            st.write(f"- √ñsszes asset: {runway.get('osszes_asset', 'N/A')} h√≥nap")
            st.warning("Aj√°nlott tartal√©k: 3-6 h√≥nap")
            
            # 6. Sp√≥rol√°si lehet≈ës√©gek
            st.subheader("üí° Sp√≥rol√°si Optimaliz√°ci√≥")
            sporolas = jelent√©s["sporolas_optimalizacio"]
            
            if 'pareto_analysis' in sporolas:
                st.write("**Pareto elemz√©s (80/20 szab√°ly):**")
                kat_darab = len(sporolas['pareto_analysis'].get('pareto_kategoriak', []))
                st.write(f"A kiad√°sok {sporolas['pareto_analysis'].get('pareto_arany_pct', 'N/A')}%-a {kat_darab} kateg√≥ri√°b√≥l sz√°rmazik")
                for kat in sporolas['pareto_analysis'].get('pareto_kategoriak', [])[:kat_darab]:
                    st.write(f"- {kat}")
            
            # 7. Befektet√©si tan√°csok
            st.subheader("üìà Befektet√©si Tan√°csok")
            befektetes = jelent√©s["befektetesi_elemzes"]
            
            if 'portfolio_suggestions' in befektetes:
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**Jelenlegi portf√≥li√≥ allok√°ci√≥:**")
                    for asset, pct in befektetes['portfolio_suggestions'].get('jelenlegi_allokaciok', {}).items():
                        st.write(f"- {asset}: {pct:.0f}%")
                
                with col2:
                    st.write("**Javasolt portf√≥li√≥ allok√°ci√≥:**")
                    for asset, pct in befektetes['portfolio_suggestions'].get('javasolt_allokaciok', {}).items():
                        st.write(f"- {asset}: {pct:.0f}%")
                
                st.write("**Elad√°si √©s v√©teli javaslatok:**")
                for action in befektetes['portfolio_suggestions'].get('rebalancing_actions', []):
                    st.write(f"- {action}")
            
            # 8. ML Insight elemz√©s            
            st.subheader("ü§ñ G√©pi tanul√°s alap√∫ elemz√©sek")
            
            st.subheader("Kock√°zatelemz√©s")
            if "nem ker√ºlsz m√≠nuszba" in ml_insight['risk_msg']:
                st.success(ml_insight['risk_msg'])
            else:
                st.warning(ml_insight['risk_msg'])
            
            st.subheader("Mozg√≥√°tlagok")
            col1, col2, col3 = st.columns(3)
            col1.metric("7 napos √°tlagk√∂lt√©s", f"{abs(ml_insight['rolling_avg']['roll7']):,.0f} Ft")
            col2.metric("30 napos √°tlagk√∂lt√©s", f"{abs(ml_insight['rolling_avg']['roll30']):,.0f} Ft")
            col3.metric("90 napos √°tlagk√∂lt√©s", f"{abs(ml_insight['rolling_avg']['roll90']):,.0f} Ft")
            
            st.subheader("K√∂lt√©si diverzit√°s")
            st.metric("Diverzit√°si indexed", f"{ml_insight['diversity']['div_user']:.4f}",
                      f"hasonl√≥ profil √°tlag: {ml_insight['diversity']['div_benchmark']:.4f}")
            
            st.subheader("Trendek")
            st.metric("Megtakar√≠t√°s v√°ltoz√°sa", f"{ml_insight['savings_trend_pp']:.1%}pont")
            
            st.metric("Ilyen helyzetben √°tlagosan el√©rhet≈ë vagyon", f"{ml_insight['suggested_assets']:,.0f} Ft")
            
            # 9. Aj√°nl√°sok
            st.subheader("üí° Javaslatok")
            for rec in eredmenyek['recommendations']:
                st.write(f"- {rec}")
    else:
        st.warning("Nincs el√©g adat az elemz√©shez. K√©rj√ºk, adj hozz√° √∫j tranzakci√≥kat.")
