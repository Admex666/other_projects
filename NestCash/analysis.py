import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.linear_model import LinearRegression
from datetime import datetime

df_raw = pd.read_csv('szintetikus_tranzakciok.csv')
df = df_raw.copy()

#%% Szok√°salap√∫ elemz√©s
mask = (df_raw.user_id==1) & (df_raw.osszeg < 0) & (df_raw.bev_kiad_tipus != "szukseglet")
df_f = df_raw[mask].copy()

df_f['datum'] = pd.to_datetime(df_f['datum'])
df_f['osszeg_abs'] = df_f['osszeg'].abs()

# Jellemz≈ëk kiv√°laszt√°sa klaszterez√©shez
features = df_f[['osszeg', 'nap_sorszam', 'osszeg_abs']].copy()

# Sk√°l√°z√°s n√©lk√ºli KMeans - baseline
kmeans = KMeans(n_clusters=3, random_state=0)
df_f['klaszter'] = kmeans.fit_predict(features[['osszeg_abs', 'nap_sorszam']])

# Vizualiz√°ci√≥
plt.scatter(df_f['nap_sorszam'], df_f['osszeg_abs'], c=df_f['klaszter'], cmap='viridis')
plt.xlabel('Nap a h√≥napban')
plt.ylabel('K√∂lt√©s (abs)')
plt.title('K√∂lt√©si klaszterek')
plt.show()

#%% Predikt√≠v figyelmeztet√©s
# P√©lda egy userre
user_id = 20
user_df = df[df['user_id'] == user_id].copy()

# Havi √∂sszes√≠t√©s napokra bontva
daily = user_df.groupby('nap_sorszam')['osszeg'].sum().cumsum().reset_index()
X = daily[['nap_sorszam']]
y = daily['osszeg']

# Line√°ris regresszi√≥ fit
model = LinearRegression()
model.fit(X, y)

# Predikci√≥ h√≥nap v√©g√©re
napok_szama = 30  # adott h√≥nap hossza
pred = model.predict([[napok_szama]])[0]

print(f"{napok_szama} nap m√∫lva el≈ërejelzett egyenleg: {pred:.2f} HUF")

if pred < 0:
    print("‚ö†Ô∏è Figyelem: V√°rhat√≥an m√≠nuszba fogsz cs√∫szni!")

#%% Sp√≥rol√°si javaslatok
# Kateg√≥ria szerinti √∂sszegz√©s
kategoriak = user_df.groupby('kategoria')['osszeg'].sum().sort_values()

# Csak "luxus" t√≠pusokat n√©z√ºnk
luxus_df = user_df[user_df['tipus'].isin(['vagy', 'impulzus'])]
luxus_kat = luxus_df.groupby('kategoria')['osszeg'].sum().sort_values()

# min√©l nagyobb a luxus kateg√≥ria k√∂lt√©s, ann√°l nagyobb a sp√≥rol√°si potenci√°l
print("üí∞ Lehets√©ges sp√≥rol√°si pontok (luxus kateg√≥ri√°k, √∂sszes k√∂lt√©s):")
print(luxus_kat)

#%% Szok√°sok v√°ltoz√°sa havonta
user_df['honap'] = pd.to_datetime(df['honap'], errors='coerce')
havi_kolt = user_df.groupby(['honap', 'kategoria'])['osszeg'].sum().abs().unstack().fillna(0)

# Egyszer≈± v√°ltoz√°s mutat√°sa pl. "mozi" kateg√≥ri√°ban
havi_kolt['mozi'].plot(kind='line', marker='o')
plt.title('Mozi k√∂lt√©s havonta')
plt.ylabel('√ñsszeg (HUF)')
plt.xlabel('H√≥nap')
plt.show()

#%% Napi √°tlagos k√∂lt√©s
user_df = df[df['user_id'] == user_id]

# Csak kiad√°sok
kiadasok = user_df[user_df['osszeg'] < 0]

# Egyedi napok sz√°mol√°sa
egyedi_napok = kiadasok['datum'].nunique()
atlag_napi_koltes = kiadasok['osszeg'].sum() / egyedi_napok

print(f"üìÖ √Åtlagos napi k√∂lt√©s: {atlag_napi_koltes:.2f} HUF")

# Kateg√≥ria szerinti sz√≥r√°s
szoras_kategoria = user_df.groupby('kategoria')['osszeg'].std().sort_values(ascending=False)

print("üìä Kateg√≥ri√°nk√©nti k√∂lt√©ssz√≥r√°s:")
print(szoras_kategoria)

#%% Sp√≥rol√°si potenci√°l
ossz_kiadas = -kiadasok['osszeg'].sum()
luxus_kiadas = -user_df[(user_df['tipus'] == 'vagy') & (user_df['osszeg'] < 0)]['osszeg'].sum()

sporolasi_potencial = luxus_kiadas / ossz_kiadas if ossz_kiadas > 0 else 0

print(f"Sp√≥rol√°si potenci√°l ar√°ny (luxus/√∂ssz): {sporolasi_potencial:.2%}")

#%% Havi c√©l egyenleg
havi_cel = 300_000

# Havi k√∂lt√©s vs. bev√©tel (felt√©telezve, hogy nincs explicit "bev√©tel" t√≠pus m√©g)
havi_adatok = user_df[pd.to_datetime(user_df['datum']).dt.month == datetime.now().month]
egyenleg = havi_adatok['assets'].to_list()[-1]

celhaladas = min(max(egyenleg / havi_cel, 0), 1)

print(f"üéØ Havi c√©l teljes√ºl√©s: {celhaladas * 100:.1f}%")

#%%
from sklearn.metrics import mean_squared_error

# Tegy√ºk fel, hogy vizsg√°ljuk 2024-08 h√≥napot
honap = '2024-08'
user_havi = user_df[user_df['datum'].str[:7] == honap]

# Napi kumul√°lt k√∂lt√©s
daily = user_havi.groupby('nap_sorszam')['osszeg'].sum().cumsum().reset_index()
X = daily[['nap_sorszam']]
y = daily['osszeg']

# Modell betan√≠t√°sa √©s el≈ërejelz√©s
model = LinearRegression()
model.fit(X, y)
y_pred = model.predict(X)

rmse = np.sqrt(mean_squared_error(y, y_pred))

print(f"üìâ RMSE (predikci√≥ vs. val√≥s k√∂lt√©s): {rmse:.2f} HUF")
