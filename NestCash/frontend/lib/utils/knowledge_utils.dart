// lib/utils/knowledge_utils.dart
import 'package:flutter/material.dart';

class KnowledgeUtils {
  // Sz√≠nek a k√ºl√∂nb√∂z≈ë neh√©zs√©gi szintekhez
  static Color getDifficultyColor(String difficulty) {
    switch (difficulty.toLowerCase()) {
      case 'beginner':
        return Colors.green;
      case 'professional':
        return Colors.blue;
      default:
        return Colors.grey;
    }
  }

  // Emoji a neh√©zs√©gi szintekhez
  static String getDifficultyEmoji(String difficulty) {
    switch (difficulty.toLowerCase()) {
      case 'beginner':
        return 'üü¢';
      case 'professional':
        return 'üîµ';
      default:
        return '‚ö™';
    }
  }

  // Sz√∂veg a neh√©zs√©gi szintekhez
  static String getDifficultyText(String difficulty) {
    switch (difficulty.toLowerCase()) {
      case 'beginner':
        return 'Kezd≈ë';
      case 'professional':
        return 'Profi';
      default:
        return 'Ismeretlen';
    }
  }

  // Motiv√°ci√≥s √ºzenetek a kv√≠z eredm√©nyekhez
  static String getMotivationalMessage(int score) {
    if (score >= 90) {
      return 'Fantasztikus! T√∂k√©letesen ismered a t√©m√°t! üåü';
    } else if (score >= 80) {
      return 'Kiv√°l√≥ munka! Nagyon j√≥l teljes√≠tett√©l! üéâ';
    } else if (score >= 70) {
      return 'J√≥ munka! Sikeresen teljes√≠tetted a kv√≠zt! üëè';
    } else if (score >= 60) {
      return 'Nem rossz! M√©g egy kis gyakorl√°ssal t√∂k√©letes leszel! üí™';
    } else {
      return 'Ne add fel! Olvasd √°t √∫jra a leck√©t √©s pr√≥b√°ld √∫jra! üìö';
    }
  }

  // Kateg√≥ria ikon alap√©rtelmezett √©rt√©kek
  static String getDefaultCategoryIcon(String categoryName) {
    final name = categoryName.toLowerCase();
    if (name.contains('p√©nz') || name.contains('finance')) {
      return 'üí∞';
    } else if (name.contains('befektet√©s') || name.contains('investment')) {
      return 'üìà';
    } else if (name.contains('bank') || name.contains('banking')) {
      return 'üè¶';
    } else if (name.contains('ad√≥') || name.contains('tax')) {
      return 'üìä';
    } else if (name.contains('kript√≥') || name.contains('crypto')) {
      return '‚Çø';
    } else if (name.contains('biztos√≠t√°s') || name.contains('insurance')) {
      return 'üõ°Ô∏è';
    } else if (name.contains('ingatlan') || name.contains('real estate')) {
      return 'üè†';
    } else {
      return 'üìö';
    }
  }

  // Halad√°s sz√°zal√©k sz√≠nez√©se
  static Color getProgressColor(double progress) {
    if (progress >= 0.8) {
      return Colors.green;
    } else if (progress >= 0.5) {
      return Colors.orange;
    } else {
      return Colors.red;
    }
  }

  // Tanul√°si id≈ë form√°z√°sa
  static String formatStudyTime(int minutes) {
    if (minutes < 60) {
      return '$minutes perc';
    } else {
      final hours = minutes ~/ 60;
      final remainingMinutes = minutes % 60;
      if (remainingMinutes == 0) {
        return '$hours √≥ra';
      } else {
        return '$hours √≥ra $remainingMinutes perc';
      }
    }
  }

  // D√°tum form√°z√°sa
  static String formatDate(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);

    if (difference.inDays == 0) {
      return 'Ma';
    } else if (difference.inDays == 1) {
      return 'Tegnap';
    } else if (difference.inDays < 7) {
      return '${difference.inDays} napja';
    } else if (difference.inDays < 30) {
      final weeks = difference.inDays ~/ 7;
      return '$weeks hete';
    } else {
      final months = difference.inDays ~/ 30;
      return '$months h√≥napja';
    }
  }

  // Streak √ºzenet gener√°l√°sa
  static String getStreakMessage(int streak) {
    if (streak == 0) {
      return 'Kezdj el egy √∫j sorozatot ma! üöÄ';
    } else if (streak == 1) {
      return 'Els≈ë nap teljes√≠tve! Folytasd holnap! üî•';
    } else if (streak < 7) {
      return '$streak napos sorozat! Folytat√°s! üí™';
    } else if (streak < 30) {
      return 'Fantasztikus! $streak napos sorozat! üåü';
    } else if (streak < 100) {
      return 'Hihetetlen! $streak napos sorozat! üèÜ';
    } else {
      return 'Legenda! $streak napos sorozat! üëë';
    }
  }

  // Kv√≠z pontsz√°m sz√≠nez√©se
  static Color getQuizScoreColor(int score) {
    if (score >= 90) {
      return Colors.green;
    } else if (score >= 80) {
      return Colors.lightGreen;
    } else if (score >= 70) {
      return Colors.orange;
    } else if (score >= 60) {
      return Colors.deepOrange;
    } else {
      return Colors.red;
    }
  }

  // Kv√≠z pontsz√°m emoji
  static String getQuizScoreEmoji(int score) {
    if (score >= 90) {
      return 'üåü';
    } else if (score >= 80) {
      return 'üéâ';
    } else if (score >= 70) {
      return 'üëè';
    } else if (score >= 60) {
      return 'üí™';
    } else {
      return 'üìö';
    }
  }

  // Kateg√≥ria sz√≠n√©nek valid√°l√°sa √©s konvert√°l√°sa
  static Color getCategoryColor(String? colorHex) {
    if (colorHex == null || colorHex.isEmpty) {
      return const Color(0xFF00D4A3); // Alap√©rtelmezett sz√≠n
    }
    
    try {
      String hex = colorHex;
      if (hex.startsWith('#')) {
        hex = hex.substring(1);
      }
      
      if (hex.length == 6) {
        hex = 'FF$hex'; // Alpha channel hozz√°ad√°sa
      }
      
      return Color(int.parse(hex, radix: 16));
    } catch (e) {
      return const Color(0xFF00D4A3); // Alap√©rtelmezett sz√≠n hiba eset√©n
    }
  }

  // Lecke befejez√©si √ºzenet
  static String getLessonCompletionMessage(bool hasQuiz, int? quizScore) {
    if (!hasQuiz) {
      return 'Gratul√°lok! Sikeresen befejezted a leck√©t! üéì';
    } else if (quizScore == null) {
      return 'Lecke befejezve! Most j√∂n a kv√≠z! üìù';
    } else if (quizScore >= 70) {
      return 'Fantasztikus! Lecke √©s kv√≠z is sikeresen teljes√≠tve! üèÜ';
    } else {
      return 'Lecke befejezve, de a kv√≠zt √©rdemes √∫jra megcsin√°lni! üí™';
    }
  }

  // Napi kih√≠v√°s √ºzenet
  static String getDailyChallengeMessage(bool isCompleted, int streak) {
    if (isCompleted) {
      if (streak > 1) {
        return 'Szuper! $streak napos sorozatod folytat√≥dik! üî•';
      } else {
        return 'Napi kih√≠v√°s teljes√≠tve! Szuper munka! üéâ';
      }
    } else {
      return 'Tanulj 5 percet √©s teljes√≠tsd a mai kih√≠v√°st! ‚≠ê';
    }
  }

  // Tanul√°si statisztika form√°z√°sa
  static String formatLearningStats({
    required int totalLessons,
    required int completedLessons,
    required int totalMinutes,
    required double averageScore,
  }) {
    final completionRate = totalLessons > 0 
        ? ((completedLessons / totalLessons) * 100).toInt()
        : 0;
    
    return '''
üìö Teljes√≠tett leck√©k: $completedLessons/$totalLessons ($completionRate%)
‚è±Ô∏è Tanul√°si id≈ë: ${formatStudyTime(totalMinutes)}
‚≠ê √Åtlagos kv√≠z eredm√©ny: ${averageScore.toInt()}%
    '''.trim();
  }

  // Neh√©zs√©gi szint alapj√°n aj√°nlott leck√©k sz≈±r√©se
  static List<T> filterLessonsByDifficulty<T>(
    List<T> lessons,
    String? difficulty,
    String Function(T) getDifficulty,
  ) {
    if (difficulty == null || difficulty.isEmpty || difficulty == 'all') {
      return lessons;
    }
    
    return lessons.where((lesson) => 
        getDifficulty(lesson).toLowerCase() == difficulty.toLowerCase()
    ).toList();
  }

  // Halad√°s anim√°ci√≥ id≈ëtartama
  static Duration getProgressAnimationDuration(double progress) {
    // Min√©l nagyobb a halad√°s, ann√°l lassabb az anim√°ci√≥
    final baseDuration = 800; // milliseconds
    final extraDuration = (progress * 500).toInt();
    return Duration(milliseconds: baseDuration + extraDuration);
  }

  // Siker hang lej√°tsz√°s√°hoz sz√ºks√©ges param√©terek
  static Map<String, dynamic> getSuccessAudioParams(int score) {
    if (score >= 90) {
      return {'volume': 0.8, 'pitch': 1.2, 'duration': 2000};
    } else if (score >= 70) {
      return {'volume': 0.6, 'pitch': 1.0, 'duration': 1500};
    } else {
      return {'volume': 0.4, 'pitch': 0.8, 'duration': 1000};
    }
  }

  // Valid√°ci√≥ a kv√≠z v√°laszokhoz
  static bool isValidQuizAnswer(dynamic answer) {
    if (answer == null) return false;
    if (answer is String) return answer.trim().isNotEmpty;
    if (answer is List) return answer.isNotEmpty;
    if (answer is int) return answer >= 0;
    return false;
  }

  // Kv√≠z k√©rd√©s t√≠pus meghat√°roz√°sa
  static String getQuestionTypeText(String type) {
    switch (type.toLowerCase()) {
      case 'multiple_choice':
        return 'T√∂bbv√°laszt√≥s';
      case 'single_choice':
        return 'Egyszeres v√°laszt√°s';
      case 'true_false':
        return 'Igaz/Hamis';
      case 'text_input':
        return 'Sz√∂veges v√°lasz';
      default:
        return 'Ismeretlen t√≠pus';
    }
  }

  // K√∂vetkez≈ë lecke aj√°nl√°sa
  static String getNextLessonRecommendation(
    bool currentLessonCompleted,
    int? quizScore,
    String difficulty,
  ) {
    if (!currentLessonCompleted) {
      return 'Fejezd be ezt a leck√©t el≈ësz√∂r! üìñ';
    }
    
    if (quizScore != null && quizScore < 70) {
      return 'Ism√©teld √°t ezt a t√©m√°t, miel≈ëtt tov√°bbl√©psz! üîÑ';
    }
    
    if (difficulty == 'beginner') {
      return 'K√©szen √°llsz a k√∂vetkez≈ë t√©m√°ra! üöÄ';
    } else {
      return 'Kiv√°l√≥ munka! Folytasd a tanul√°st! üí™';
    }
  }

  // Hibakezel√©s √ºzenetek
  static String getErrorMessage(String errorType) {
    switch (errorType.toLowerCase()) {
      case 'network':
        return 'H√°l√≥zati hiba. Ellen≈ërizd az internetkapcsolatot! üåê';
      case 'server':
        return 'Szerver hiba. Pr√≥b√°ld √∫jra k√©s≈ëbb! ‚ö†Ô∏è';
      case 'auth':
        return 'Hiteles√≠t√©si hiba. Jelentkezz be √∫jra! üîê';
      case 'quiz_not_found':
        return 'A kv√≠z nem tal√°lhat√≥! üîç';
      case 'lesson_not_found':
        return 'A lecke nem tal√°lhat√≥! üìö';
      default:
        return 'Ismeretlen hiba t√∂rt√©nt! ‚ùå';
    }
  }
}