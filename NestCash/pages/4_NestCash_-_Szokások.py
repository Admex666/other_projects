# pages/5_üéØ_Szok√°sok.py
import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import time
import plotly.express as px
import plotly.graph_objects as go
from database import db

# Get data from session state
if 'logged_in' not in st.session_state or not st.session_state.logged_in:
    st.warning("K√©rj√ºk, el≈ësz√∂r jelentkezzen be!")
    st.stop()

current_user = st.session_state.user_id
df = st.session_state.df
user_df = df[df["user_id"] == current_user]

st.title("üí∞ NestCash protot√≠pus")
st.success(f"üë§ Bejelentkezve mint: {st.session_state.username} (ID: {current_user})")

# Metrics display
if user_df.empty:
    likvid = befektetes = megtakaritas = 0
    profil = 'alap'
else:
    likvid = user_df['likvid'].iloc[-1]
    befektetes = user_df['befektetes'].iloc[-1]
    megtakaritas = user_df['megtakaritas'].iloc[-1]
    profil = user_df['profil'].iloc[-1]

cols = st.columns(3)
cols[0].metric("üíµ Likvid", f"{likvid:,.0f}Ft")
cols[1].metric("üìà Befektet√©sek", f"{befektetes:,.0f}Ft")
cols[2].metric("üè¶ Megtakar√≠t√°sok", f"{megtakaritas:,.0f}Ft")

st.header("")
st.header("üéØ Szok√°sok k√∂vet√©se")

#%% Szok√°skezel≈ë f√ºggv√©nyek
def load_habits():
    """Felhaszn√°l√≥ szok√°sainak bet√∂lt√©se"""
    habits = list(db.habits.find({"user_id": str(current_user)}))
    return pd.DataFrame(habits) if habits else pd.DataFrame(columns=[
        "habit_id", "user_id", "title", "description", "category", 
        "frequency", "target_value", "tracking_type", "is_active",
        "created_at", "streak_count", "best_streak", "last_completed"
    ])

def save_habit(habit_data):
    """√öj szok√°s ment√©se"""
    try:
        habit_data["user_id"] = str(current_user)
        habit_data["created_at"] = datetime.now().strftime("%Y-%m-%d %H:%M")
        habit_data["streak_count"] = 0
        habit_data["best_streak"] = 0
        habit_data["last_completed"] = None
        habit_data["has_goal"] = "target_value" in habit_data and "goal_period" in habit_data
        habit_data["daily_target"] = calculate_daily_target(habit_data) if habit_data["has_goal"] else None
        
        result = db.habits.insert_one(habit_data)
        return result.inserted_id is not None
    except Exception as e:
        st.error(f"Hiba a szok√°s ment√©sekor: {e}")
        return False

def load_habit_logs():
    """Szok√°snapl√≥k bet√∂lt√©se"""
    logs = list(db.habit_logs.find({"user_id": str(current_user)}))
    return pd.DataFrame(logs) if logs else pd.DataFrame(columns=[
        "log_id", "user_id", "habit_id", "date", "completed", 
        "value", "notes", "created_at"
    ])

def log_habit_completion(habit_id, completed, value=None, notes=""):
    """Szok√°s teljes√≠t√©s√©nek napl√≥z√°sa"""
    try:
        today = datetime.now().date().strftime("%Y-%m-%d")
        
        # Ellen≈ërizz√ºk, hogy ma m√°r volt-e bejegyz√©s
        existing_log = db.habit_logs.find_one({
            "user_id": str(current_user),
            "habit_id": habit_id,
            "date": today
        })
        
        log_data = {
            "user_id": str(current_user),
            "habit_id": habit_id,
            "date": today,
            "completed": completed,
            "value": value,
            "notes": notes,
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        if existing_log:
            # Friss√≠tj√ºk a megl√©v≈ë bejegyz√©st
            db.habit_logs.update_one(
                {"_id": existing_log["_id"]},
                {"$set": log_data}
            )
        else:
            # √öj bejegyz√©s
            db.habit_logs.insert_one(log_data)
        
        # Streak sz√°m√≠t√°s friss√≠t√©se
        update_habit_streak(habit_id)
        return True
        
    except Exception as e:
        st.error(f"Hiba a szok√°s napl√≥z√°sakor: {e}")
        return False

def update_habit_streak(habit_id):
    """Szok√°s streak sz√°m√≠t√°s friss√≠t√©se"""
    try:
        # Utols√≥ 30 nap logjai
        thirty_days_ago = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
        logs = list(db.habit_logs.find({
            "user_id": str(current_user),
            "habit_id": habit_id,
            "date": {"$gte": thirty_days_ago}
        }).sort("date", -1))
        
        if not logs:
            return
        
        # Jelenlegi streak sz√°m√≠t√°sa
        current_streak = 0
        today = datetime.now().date()
        
        for log in logs:
            log_date = datetime.strptime(log["date"], "%Y-%m-%d").date()
            days_diff = (today - log_date).days
            
            if days_diff == current_streak and log["completed"]:
                current_streak += 1
            else:
                break
        
        # Legjobb streak keres√©se
        best_streak = 0
        temp_streak = 0
        
        for log in reversed(logs):
            if log["completed"]:
                temp_streak += 1
                best_streak = max(best_streak, temp_streak)
            else:
                temp_streak = 0
        
        # Friss√≠t√©s az adatb√°zisban
        db.habits.update_one(
            {"habit_id": habit_id, "user_id": str(current_user)},
            {
                "$set": {
                    "streak_count": current_streak,
                    "best_streak": best_streak,
                    "last_completed": logs[0]["date"] if logs and logs[0]["completed"] else None
                }
            }
        )
        
    except Exception as e:
        st.error(f"Hiba a streak friss√≠t√©sekor: {e}")

def get_habit_progress(habit_id, days=30):
    """Szok√°s halad√°s√°nak lek√©r√©se"""
    try:
        start_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")
        logs = list(db.habit_logs.find({
            "user_id": str(current_user),
            "habit_id": habit_id,
            "date": {"$gte": start_date}
        }).sort("date", 1))
        
        return pd.DataFrame(logs) if logs else pd.DataFrame()
    except Exception as e:
        st.error(f"Hiba a halad√°s lek√©r√©sekor: {e}")
        return pd.DataFrame()

def calculate_daily_target(habit):
    """Napi c√©l√©rt√©k kisz√°m√≠t√°sa a gyakoris√°g alapj√°n"""
    if habit["frequency"] == "Napi":
        return habit["target_value"]
    elif habit["frequency"] == "Heti":
        return habit["target_value"] / 7
    elif habit["frequency"] == "Havi":
        return habit["target_value"] / 30
    return None

def update_habit_status(habit_id, is_active):
    """Szok√°s √°llapot√°nak friss√≠t√©se (akt√≠v/inakt√≠v)"""
    try:
        db.habits.update_one(
            {"habit_id": habit_id, "user_id": str(current_user)},
            {"$set": {"is_active": is_active}}
        )
        return True
    except Exception as e:
        st.error(f"Hiba a szok√°s friss√≠t√©sekor: {e}")
        return False

#%% Predefini√°lt szok√°sok
PREDEFINED_HABITS = {
    "P√©nz√ºgyi szok√°sok": [
        {"title": "Nem rendeltem √©telt", "description": "Nem rendeltem √©telt h√°zhozsz√°ll√≠t√°ssal", "category": "P√©nz√ºgyi"},
        {"title": "Bev√°s√°rl√≥ lista alapj√°n v√°s√°roltam", "description": "Csak a list√°n szerepl≈ë dolgokat vettem meg", "category": "P√©nz√ºgyi"},
        {"title": "Impulzusv√°s√°rl√°s ker√ºl√©se", "description": "Nem v√°s√°roltam spont√°n m√≥don", "category": "P√©nz√ºgyi"},
        {"title": "Napi k√∂lt√©s nyomon k√∂vet√©se", "description": "Minden kiad√°st r√∂gz√≠tettem", "category": "P√©nz√ºgyi"},
    ],
    "Megtakar√≠t√°si szok√°sok": [
        {"title": "Napi megtakar√≠t√°s", "description": "Minden nap tettem f√©lre valamennyit", "category": "Megtakar√≠t√°s"},
        {"title": "Apr√≥p√©nz gy≈±jt√©s", "description": "Az apr√≥p√©nzt k√ºl√∂n gy≈±jt√∂ttem", "category": "Megtakar√≠t√°s"},
        {"title": "50/30/20 szab√°ly", "description": "Betartottam a 50/30/20 k√∂lts√©gvet√©si szab√°lyt", "category": "Megtakar√≠t√°s"},
    ],
    "Befektet√©si szok√°sok": [
        {"title": "Befektet√©si h√≠rek olvas√°sa", "description": "Minimum 10 percet t√∂lt√∂ttem p√©nz√ºgyi h√≠rek olvas√°s√°val", "category": "Befektet√©s"},
        {"title": "Portf√≥li√≥ √°ttekint√©se", "description": "Ellen≈ëriztem a befektet√©seim teljes√≠tm√©ny√©t", "category": "Befektet√©s"},
    ]
}

# F≈ë interf√©sz
tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìä √Åttekint√©s", "‚ûï √öj szok√°s", "üìù Napi r√∂gz√≠t√©s", "üìà Statisztik√°k", "üì¶ Archiv√°lt szok√°sok"])

with tab1:
    st.subheader("Szok√°sok √°ttekint√©se")
    
    habits_df = load_habits()
    active_habits = habits_df[habits_df["is_active"] == True] if not habits_df.empty else pd.DataFrame()
    
    if active_habits.empty:
        st.info("Nincsenek akt√≠v szok√°sok. Hozz l√©tre √∫jat az '√öj szok√°s' f√ºl√∂n!")
    else:
        # Gyors √°ttekint√©s
        col1, col2, col3 = st.columns(3)
        
        total_habits = len(active_habits)
        avg_streak = active_habits["streak_count"].mean() if not active_habits.empty else 0
        best_streak = active_habits["best_streak"].max() if not active_habits.empty else 0
        
        col1.metric("Akt√≠v szok√°sok", total_habits)
        col2.metric("√Åtlagos streak", f"{avg_streak:.1f}")
        col3.metric("Legjobb streak", best_streak)
        
        # Szok√°sok list√°ja
        st.write("### Akt√≠v szok√°sok")
        for _, habit in active_habits.iterrows():
            with st.expander(f"{habit['title']} (üî• {habit['streak_count']} nap)"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**Le√≠r√°s:** {habit['description']}")
                    st.write(f"**Kateg√≥ria:** {habit['category']}")
                    st.write(f"**Gyakoris√°g:** {habit['frequency']}")
                
                with col2:
                    st.write(f"**Jelenlegi streak:** {habit['streak_count']} nap")
                    st.write(f"**Legjobb streak:** {habit['best_streak']} nap")
                    st.write(f"**Utolj√°ra teljes√≠tve:** {habit['last_completed'] or 'M√©g soha'}")
                    
                    if habit.get('has_goal'):
                        goal_text = f"{habit['target_value']} ({habit['goal_period']})"
                        if habit['tracking_type'] == 'boolean':
                            goal_text += f" ({habit['target_value']/7:.1f}/nap)" if habit['goal_period'] == 'Heti' else ""
                            goal_text += f" ({habit['target_value']/30:.1f}/nap)" if habit['goal_period'] == 'Havi' else ""
                        st.write(f"**C√©l:** {goal_text}")
                
                # Gyors napl√≥z√°s
                col1, col2 = st.columns(2)
                if habit['tracking_type'] == 'boolean':
                    if col1.button(f"‚úÖ Teljes√≠tve ma", key=f"complete_{habit['habit_id']}"):
                        if log_habit_completion(habit['habit_id'], True):
                            st.success("Szok√°s teljes√≠tve!")
                            st.rerun()
                    
                    if col2.button(f"‚ùå Nem teljes√≠tve", key=f"skip_{habit['habit_id']}"):
                        if log_habit_completion(habit['habit_id'], False):
                            st.info("Bejegyz√©s r√∂gz√≠tve.")
                            st.rerun()
                else:
                    value = col1.number_input("√ârt√©k", min_value=0, key=f"value_{habit['habit_id']}")
                    if col2.button("R√∂gz√≠t√©s", key=f"log_{habit['habit_id']}"):
                        if log_habit_completion(habit['habit_id'], True, value):
                            st.success("√ârt√©k r√∂gz√≠tve!")
                            st.rerun()
                
                # Archiv√°l√°s/T√∂rl√©s gombok
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("üìå Archiv√°l√°s", key=f"archive_{habit['habit_id']}"):
                        st.session_state[f"confirm_archive_{habit['habit_id']}"] = True
                    
                    if st.session_state.get(f"confirm_archive_{habit['habit_id']}", False):
                        st.warning(f"Biztosan archiv√°lni szeretn√©d: {habit['title']}?")
                        confirm_col1, confirm_col2 = st.columns(2)
                        with confirm_col1:
                            if st.button("Igen", key=f"archive_yes_{habit['habit_id']}"):
                                if update_habit_status(habit['habit_id'], False):
                                    st.session_state[f"confirm_archive_{habit['habit_id']}"] = False
                                    st.success("Szok√°s archiv√°lva!")
                                    st.rerun()
                        with confirm_col2:
                            if st.button("M√©gse", key=f"archive_no_{habit['habit_id']}"):
                                st.session_state[f"confirm_archive_{habit['habit_id']}"] = False
                                st.rerun()
                
                with col2:
                    if st.button("üóëÔ∏è T√∂rl√©s", key=f"delete_{habit['habit_id']}"):
                        st.session_state[f"confirm_delete_{habit['habit_id']}"] = True
                    
                    if st.session_state.get(f"confirm_delete_{habit['habit_id']}", False):
                        st.error(f"Biztosan t√∂r√∂lni szeretn√©d: {habit['title']}?")
                        confirm_col1, confirm_col2 = st.columns(2)
                        with confirm_col1:
                            if st.button("Igen", key=f"delete_yes_{habit['habit_id']}"):
                                db.habits.delete_one({"habit_id": habit['habit_id'], "user_id": str(current_user)})
                                db.habit_logs.delete_many({"habit_id": habit['habit_id'], "user_id": str(current_user)})
                                st.session_state[f"confirm_delete_{habit['habit_id']}"] = False
                                st.success("Szok√°s t√∂r√∂lve!")
                                st.rerun()
                        with confirm_col2:
                            if st.button("M√©gse", key=f"delete_no_{habit['habit_id']}"):
                                st.session_state[f"confirm_delete_{habit['habit_id']}"] = False
                               

with tab2:
    st.subheader("√öj szok√°s hozz√°ad√°sa")
    
    # Predefini√°lt szok√°sok kiv√°laszt√°sa
    with st.expander("üîÑ El≈ëre meghat√°rozott szok√°sok"):
        for category, habits in PREDEFINED_HABITS.items():
            st.write(f"**{category}:**")
            for i, habit in enumerate(habits):
                col1, col2 = st.columns([3, 1])
                col1.write(f"‚Ä¢ {habit['title']}")
                if col2.button("Hozz√°ad√°s", key=f"add_predefined_{category}_{i}"):
                    habit_data = {
                        "habit_id": f"{current_user}_{int(time.time())}",
                        "title": habit["title"],
                        "description": habit["description"],
                        "category": habit["category"],
                        "frequency": "Napi",
                        "target_value": 1,
                        "tracking_type": "boolean",
                        "is_active": True
                    }
                    
                    if save_habit(habit_data):
                        st.success(f"Szok√°s hozz√°adva: {habit['title']}")
                        st.rerun()
    
    # Egy√©ni szok√°s l√©trehoz√°sa
    with st.expander("### üßë Saj√°t szok√°s l√©trehoz√°sa"):
        # A checkbox-ot a formon K√çV√úL helyezz√ºk el
        has_goal = st.checkbox("C√©l megad√°sa a szok√°shoz", key="has_goal")
        
        with st.form("new_habit_form"):
            title = st.text_input("Szok√°s neve*")
            description = st.text_area("Le√≠r√°s")
            category = st.selectbox("Kateg√≥ria", ["P√©nz√ºgyi", "Megtakar√≠t√°s", "Befektet√©s", "Egy√©b"])
            frequency = st.selectbox("Gyakoris√°g", ["Napi", "Heti", "Havi"])
            tracking_type = st.selectbox(
                "K√∂vet√©s t√≠pusa", 
                options=[
                    {"name": "Igen/Nem", "value": "boolean"},
                    {"name": "Sz√°mszer≈±", "value": "numeric"}
                ],
                format_func=lambda x: x["name"]
            )["value"]
            
            # C√©l mez≈ëk megjelen√≠t√©se a checkbox √°llapota alapj√°n
            if st.session_state.get("has_goal", False):
                target_value = st.number_input("C√©l √©rt√©ke", min_value=1, value=1)
                goal_period = st.selectbox("C√©l id≈ëszaka", ["Napi", "Heti", "Havi"])
            
            if st.form_submit_button("Szok√°s l√©trehoz√°sa"):
                if not title.strip():
                    st.error("A szok√°s neve k√∂telez≈ë!")
                else:
                    habit_data = {
                        "habit_id": f"{current_user}_{int(time.time())}",
                        "title": title,
                        "description": description,
                        "category": category,
                        "frequency": frequency,
                        "tracking_type": tracking_type,
                        "is_active": True
                    }
                    
                    if st.session_state.get("has_goal", False):
                        habit_data.update({
                            "target_value": target_value,
                            "goal_period": goal_period,
                            "daily_target": calculate_daily_target({
                                "frequency": frequency,
                                "target_value": target_value
                            })
                        })
                    
                    if save_habit(habit_data):
                        st.success("Szok√°s sikeresen l√©trehozva!")
                        st.rerun()

with tab3:
    st.subheader("Napi szok√°s r√∂gz√≠t√©s")
    
    habits_df = load_habits()
    active_habits = habits_df[habits_df["is_active"] == True] if not habits_df.empty else pd.DataFrame()
    
    if active_habits.empty:
        st.info("Nincsenek akt√≠v szok√°sok.")
    else:
        today = datetime.now().date().strftime("%Y-%m-%d")
        
        # Ellen≈ërizz√ºk, melyek vannak m√°r ma r√∂gz√≠tve
        today_logs = list(db.habit_logs.find({
            "user_id": str(current_user),
            "date": today
        }))
        
        logged_habit_ids = [log["habit_id"] for log in today_logs]
        
        st.write(f"### Mai nap r√∂gz√≠t√©se ({today})")
        
        for _, habit in active_habits.iterrows():
            with st.expander(f"{habit['title']} {'‚úÖ' if habit['habit_id'] in logged_habit_ids else '‚è≥'}"):
                
                # Megl√©v≈ë mai bejegyz√©s megjelen√≠t√©se
                existing_log = next((log for log in today_logs if log["habit_id"] == habit["habit_id"]), None)
                
                if existing_log:
                    status = "‚úÖ Teljes√≠tve" if existing_log["completed"] else "‚ùå Nem teljes√≠tve"
                    st.write(f"**Mai √°llapot:** {status}")
                    if existing_log.get("notes"):
                        st.write(f"**Jegyzet:** {existing_log['notes']}")
                
                # R√∂gz√≠t√©si ≈±rlap
                with st.form(f"log_habit_{habit['habit_id']}"):
                    st.write(f"**{habit['title']}**")
                    st.write(habit['description'])
                    
                    if habit['tracking_type'] == 'boolean':
                        completed = st.checkbox("Teljes√≠tve", value=existing_log["completed"] if existing_log else False)
                        value = None
                    else:
                        completed = st.checkbox("Teljes√≠tve", value=existing_log["completed"] if existing_log else False)
                        value = st.number_input("√ârt√©k", min_value=0, value=existing_log.get("value", 0) if existing_log else 0)
                    
                    notes = st.text_area("Jegyzet (opcion√°lis)", value=existing_log.get("notes", "") if existing_log else "")
                    
                    if st.form_submit_button("R√∂gz√≠t√©s"):
                        if log_habit_completion(habit['habit_id'], completed, value, notes):
                            st.success("Szok√°s r√∂gz√≠tve!")
                            st.rerun()

with tab4:
    st.subheader("Statisztik√°k √©s halad√°s")
    
    habits_df = load_habits()
    active_habits = habits_df[habits_df["is_active"] == True] if not habits_df.empty else pd.DataFrame()
    
    if active_habits.empty:
        st.info("Nincsenek akt√≠v szok√°sok.")
    else:
        # Szok√°s kiv√°laszt√°sa
        habit_titles = dict(zip(active_habits["habit_id"], active_habits["title"]))
        selected_habit_id = st.selectbox("V√°lassz szok√°st", list(habit_titles.keys()), format_func=lambda x: habit_titles[x])
        
        if selected_habit_id:
            selected_habit = active_habits[active_habits["habit_id"] == selected_habit_id].iloc[0]
            
            # Halad√°s lek√©r√©se
            progress_df = get_habit_progress(selected_habit_id, 30)
            
            if not progress_df.empty:
                # Napi teljes√≠t√©s grafikon
                if selected_habit['tracking_type'] == 'boolean':
                    daily_summary = progress_df.groupby(['date', 'completed']).size().unstack(fill_value=0)
                    daily_summary = daily_summary.reset_index()
                    
                    fig = px.bar(
                        daily_summary, 
                        x='date', 
                        y=[True, False] if False in daily_summary.columns else [True],
                        title=f'{selected_habit["title"]} - Utols√≥ 30 nap',
                        labels={'value': 'Darab', 'date': 'D√°tum'},
                        color_discrete_map={True: 'green', False: 'red'},
                        barmode='group'
                    )
                    
                    # C√©lvonal hozz√°ad√°sa boolean szok√°sokhoz
                    if selected_habit.get('has_goal'):
                        target_value = selected_habit['target_value']
                        if selected_habit['goal_period'] == 'Heti':
                            target_value = target_value / 7
                        elif selected_habit['goal_period'] == 'Havi':
                            target_value = target_value / 30
                            
                        fig.add_hline(
                            y=target_value,
                            line_dash="dot",
                            line_color="blue",
                            annotation_text=f"Napi c√©l: {target_value:.1f}",
                            annotation_position="bottom right"
                        )
                else:
                    # Numerikus szok√°sok vizualiz√°ci√≥ja
                    fig = px.bar(
                        progress_df,
                        x='date',
                        y='value',
                        title=f'{selected_habit["title"]} - Utols√≥ 30 nap',
                        labels={'value': '√ârt√©k', 'date': 'D√°tum'},
                        color='completed',
                        color_discrete_map={True: 'green', False: 'red'}
                    )
                    
                    # C√©lvonal hozz√°ad√°sa numerikus szok√°sokhoz
                    if selected_habit.get('has_goal'):
                        daily_target = selected_habit['daily_target']
                        fig.add_hline(
                            y=daily_target,
                            line_dash="dot",
                            line_color="blue",
                            annotation_text=f"Napi c√©l: {daily_target:.1f}",
                            annotation_position="bottom right"
                        )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Halad√°s mutat√≥ja
                if selected_habit.get('has_goal'):
                    st.subheader("C√©lhoz viszony√≠tott halad√°s")
                    total_days = len(progress_df)
                    actual_value = progress_df['value'].sum() if selected_habit['tracking_type'] == 'numeric' else progress_df['completed'].sum()
                    
                    if selected_habit['goal_period'] == 'Napi':
                        target = selected_habit['target_value'] * total_days
                    elif selected_habit['goal_period'] == 'Heti':
                        target = selected_habit['target_value'] * (total_days / 7)
                    else:  # Havi
                        target = selected_habit['target_value'] * (total_days / 30)
                    
                    progress_percent = min(100, (actual_value / target * 100)) if target > 0 else 0
                    st.progress(progress_percent/100, text=f"Halad√°s: {actual_value:.1f}/{target:.1f} ({progress_percent:.1f}%)")
                            
                # Heti √∂sszes√≠t√©s
                progress_df['date'] = pd.to_datetime(progress_df['date'])
                progress_df['week'] = progress_df['date'].dt.isocalendar().week
                
                if selected_habit['tracking_type'] == 'boolean':
                    weekly_summary = progress_df.groupby('week')['completed'].sum().reset_index()
                    y_column = 'completed'
                    y_title = 'Teljes√≠tett napok'
                else:
                    weekly_summary = progress_df.groupby('week')['value'].sum().reset_index()
                    y_column = 'value'
                    y_title = '√ñssz√©rt√©k'
                
                fig2 = px.bar(
                    weekly_summary, 
                    x='week', 
                    y=y_column,
                    title='Heti teljes√≠t√©s',
                    labels={y_column: y_title, 'week': 'H√©t'}
                )
                st.plotly_chart(fig2, use_container_width=True)
                
                # Statisztik√°k
                col1, col2, col3 = st.columns(3)
                
                total_days = len(progress_df)
                completed_days = progress_df['completed'].sum()
                completion_rate = (completed_days / total_days * 100) if total_days > 0 else 0
                
                col1.metric("√ñsszes nap", total_days)
                col2.metric("Teljes√≠tett napok", completed_days)
                col3.metric("Teljes√≠t√©si ar√°ny", f"{completion_rate:.1f}%")
                
            else:
                st.info("M√©g nincsenek r√∂gz√≠t√©sek ehhez a szok√°shoz.")
                
with tab5:
    st.subheader("Archiv√°lt szok√°sok")
    
    habits_df = load_habits()
    archived_habits = habits_df[habits_df["is_active"] == False] if not habits_df.empty else pd.DataFrame()
    
    if archived_habits.empty:
        st.info("Nincsenek archiv√°lt szok√°sok.")
    else:
        for _, habit in archived_habits.iterrows():
            with st.expander(f"{habit['title']}"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**Le√≠r√°s:** {habit['description']}")
                    st.write(f"**Kateg√≥ria:** {habit['category']}")
                    st.write(f"**Utolj√°ra teljes√≠tve:** {habit['last_completed'] or 'M√©g soha'}")
                
                with col2:
                    if st.button("üîô Vissza√°ll√≠t√°s", key=f"restore_{habit['habit_id']}"):
                        if update_habit_status(habit['habit_id'], True):
                            st.success("Szok√°s vissza√°ll√≠tva!")
                            st.rerun()
                            
                    if st.button("üóëÔ∏è T√∂rl√©s", key=f"delete_{habit['habit_id']}"):
                        st.session_state[f"confirm_delete_{habit['habit_id']}"] = True
                    
                    if st.session_state.get(f"confirm_delete_{habit['habit_id']}", False):
                        st.error(f"Biztosan t√∂r√∂lni szeretn√©d: {habit['title']}?")
                        confirm_col1, confirm_col2 = st.columns(2)
                        with confirm_col1:
                            if st.button("Igen", key=f"delete_yes_{habit['habit_id']}"):
                                db.habits.delete_one({"habit_id": habit['habit_id'], "user_id": str(current_user)})
                                db.habit_logs.delete_many({"habit_id": habit['habit_id'], "user_id": str(current_user)})
                                st.session_state[f"confirm_delete_{habit['habit_id']}"] = False
                                st.success("Szok√°s t√∂r√∂lve!")
                                st.rerun()
                        with confirm_col2:
                            if st.button("M√©gse", key=f"delete_no_{habit['habit_id']}"):
                                st.session_state[f"confirm_delete_{habit['habit_id']}"] = False