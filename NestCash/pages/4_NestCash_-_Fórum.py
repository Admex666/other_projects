import streamlit as st
import pandas as pd
from datetime import datetime
from database import load_data, save_data, get_collection, update_collection, db

# Get data from session state
if 'logged_in' not in st.session_state or not st.session_state.logged_in:
    st.warning("K√©rj√ºk, el≈ësz√∂r jelentkezzen be!")
    st.stop()

current_user = st.session_state.user_id
username = st.session_state.username
df = st.session_state.df
user_df = df[df["user_id"] == current_user]


# Adatbet√∂lt√©si f√ºggv√©nyek
# M√≥dos√≠tsd a f√≥rum f√°jlkezel≈ë f√ºggv√©nyeket:
# F√≥rum posztok kezel√©se MongoDB-vel
def load_forum_posts():
    posts = list(db.forum_posts.find({}))
    return pd.DataFrame(posts) if posts else pd.DataFrame(columns=[
        "post_id", "user_id", "username", "timestamp", 
        "title", "content", "category"
    ])

def save_forum_posts(posts_df):
    # T√∂r√∂lj√ºk a r√©gi posztokat
    db.forum_posts.delete_many({})
    
    if not posts_df.empty:
        # √öj posztok besz√∫r√°sa
        db.forum_posts.insert_many(posts_df.to_dict("records"))

# Hozz√°sz√≥l√°sok kezel√©se
def load_comments():
    comments = list(db.forum_comments.find({}))
    return pd.DataFrame(comments) if comments else pd.DataFrame(columns=[
        "comment_id", "post_id", "user_id", "username",
        "timestamp", "content"
    ])

def save_comments(comments_df):
    # T√∂r√∂lj√ºk a r√©gi hozz√°sz√≥l√°sokat
    db.forum_comments.delete_many({})
    
    if not comments_df.empty:
        # √öj hozz√°sz√≥l√°sok besz√∫r√°sa
        db.forum_comments.insert_many(comments_df.to_dict("records"))

# F≈ë f√≥rum oldal
st.title("üí∞ NestCash protot√≠pus")
st.success(f"üë§ Bejelentkezve mint: {st.session_state.username} (ID: {current_user})")
if user_df.empty:
    likvid = 0
    befektetes = 0
    megtakaritas = 0
    profil = 'alap'
else:
    likvid = user_df['likvid'].iloc[-1]
    befektetes = user_df['befektetes'].iloc[-1]
    megtakaritas = user_df['megtakaritas'].iloc[-1]
    profil = user_df['profil'].iloc[-1]

cols = st.columns(3)
cols[0].metric("üíµ Likvid", f"{likvid:,.0f}Ft")
cols[1].metric("üìà Befektet√©sek", f"{befektetes:,.0f}Ft")
cols[2].metric("üè¶ Megtakar√≠t√°sok", f"{megtakaritas:,.0f}Ft")

st.header("")
st.header("üí¨ K√∂z√∂ss√©gi F√≥rum")

# Kateg√≥ri√°k
categories = [
    "√Åltal√°nos",
    "Befektet√©sek",
    "Megtakar√≠t√°si tippek",
    "K√∂lts√©gkezel√©s",
    "K√©rd√©sek"
]

# √öj bejegyz√©s l√©trehoz√°sa
with st.expander("‚ûï √öj bejegyz√©s l√©trehoz√°sa", expanded=False):
    with st.form("new_post_form"):
        col1, col2 = st.columns(2)
        title = col1.text_input("C√≠m*")
        category = col2.selectbox("Kateg√≥ria*", categories)
        content = st.text_area("Tartalom*", height=150)
        
        submitted = st.form_submit_button("K√∂zz√©t√©tel")
        
        # √öj bejegyz√©s l√©trehoz√°s√°nak jav√≠tott r√©sze
        if submitted:
            if not title or not content:
                st.error("A csillaggal (*) jel√∂lt mez≈ëk kit√∂lt√©se k√∂telez≈ë!")
            else:
                posts_df = load_forum_posts()
                new_post_id = str(posts_df["post_id"].max() + 1)
                # MongoDB-ben egyedi ID gener√°l√°sa
                new_post = {
                    "post_id": new_post_id,
                    "user_id": current_user,
                    "username": username,
                    "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M"),
                    "title": title,
                    "content": content,
                    "category": category
                }
                
                # Besz√∫r√°s √©s az automatikusan gener√°lt _id lek√©r√©se
                db.forum_posts.insert_one(new_post)
                
                st.success("Bejegyz√©s sikeresen k√∂zz√©t√©ve!")
                st.rerun()

# Bejegyz√©sek megjelen√≠t√©se
st.subheader("Legut√≥bbi bejegyz√©sek")
posts_df = load_forum_posts()
comments_df = load_comments()

# Sz≈±r√©s √©s rendez√©s
col1, col2 = st.columns(2)
with col1:
    selected_category = st.selectbox("Kateg√≥ria", ["√ñsszes"] + categories)
with col2:
    sort_order = st.radio("Rendez√©s", ["Leg√∫jabb el≈ël", "Legr√©gebbi el≈ël"])

# Sz≈±r√©s alkalmaz√°sa
if selected_category != "√ñsszes":
    filtered_posts = posts_df[posts_df["category"] == selected_category]
else:
    filtered_posts = posts_df

# Rendez√©s alkalmaz√°sa
if sort_order == "Leg√∫jabb el≈ël":
    filtered_posts = filtered_posts.sort_values("timestamp", ascending=False)
else:
    filtered_posts = filtered_posts.sort_values("timestamp", ascending=True)

# Bejegyz√©sek megjelen√≠t√©se
if filtered_posts.empty:
    st.info("M√©g nincsenek bejegyz√©sek ebben a kateg√≥ri√°ban.")
else:
    for _, post in filtered_posts.iterrows():
        with st.container():
            st.markdown(f"#### {post['title']}")
            st.caption(f"üìÖ {post['timestamp']} | üë§ {post['username']} | üè∑Ô∏è {post['category']}")
            st.markdown(post['content'])
            
            # Hozz√°sz√≥l√°sok szekci√≥
            post_comments = comments_df[comments_df["post_id"] == post["post_id"]]
            comment_count = len(post_comments)
            
            with st.expander(f"üí¨ Hozz√°sz√≥l√°sok ({comment_count})", expanded=False):
                # Megl√©v≈ë hozz√°sz√≥l√°sok
                if not post_comments.empty:
                    for _, comment in post_comments.sort_values("timestamp").iterrows():
                        st.markdown(f"**{comment['username']}** ({comment['timestamp']}):")
                        st.markdown(comment['content'])
                        st.divider()
                
                # √öj hozz√°sz√≥l√°s
                with st.form(key=f"comment_form_{post['post_id']}"):
                    new_comment = st.text_area("√öj hozz√°sz√≥l√°s", key=f"comment_{post['post_id']}")
                    submitted = st.form_submit_button("Hozz√°sz√≥l√°s k√ºld√©se")
                    
                    if submitted and new_comment:
                        new_comment_id = comments_df["comment_id"].max() + 1 if not comments_df.empty else 1
                        
                        new_comment_row = {
                            "comment_id": new_comment_id,
                            "post_id": post["post_id"],
                            "user_id": current_user,
                            "username": username,
                            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M"),
                            "content": new_comment
                        }
                        
                        comments_df = pd.concat([comments_df, pd.DataFrame([new_comment_row])], ignore_index=True)
                        save_comments(comments_df)
                        st.success("Hozz√°sz√≥l√°s elk√ºldve!")
                        st.rerun()
            
            st.divider()