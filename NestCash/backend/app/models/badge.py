# app/models/badge.py
from __future__ import annotations
from beanie import Document, PydanticObjectId
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Literal
from datetime import datetime
from enum import Enum

class BadgeCategory(str, Enum):
    TRANSACTION = "transaction"  # Tranzakci√≥ alap√∫
    SAVINGS = "savings"         # Megtakar√≠t√°s alap√∫
    KNOWLEDGE = "knowledge"     # Tud√°s alap√∫
    STREAK = "streak"          # Sorozat alap√∫
    MILESTONE = "milestone"    # M√©rf√∂ldk≈ë alap√∫
    SOCIAL = "social"          # K√∂z√∂ss√©gi alap√∫
    SPECIAL = "special"        # K√ºl√∂nleges

class BadgeRarity(str, Enum):
    COMMON = "common"      # Gyakori - üü¢
    UNCOMMON = "uncommon"  # Ritka - üîµ  
    RARE = "rare"          # Nagyon ritka - üü£
    EPIC = "epic"          # Epikus - üü†
    LEGENDARY = "legendary" # Legend√°s - üü°

class BadgeType(Document):
    """Badge t√≠pus defin√≠ci√≥ - a rendszerben el√©rhet≈ë badge-ek"""
    
    # Alapadatok
    code: str = Field(..., description="Egyedi badge k√≥d", unique=True)
    name: str = Field(..., description="Badge neve")
    description: str = Field(..., description="Badge le√≠r√°sa")
    
    # Vizu√°lis megjelen√©s
    icon: str = Field(..., description="Badge ikonja (emoji vagy ikon n√©v)")
    color: str = Field(default="#3B82F6", description="Badge sz√≠ne (hex)")
    image_url: Optional[str] = Field(None, description="Badge k√©p√©nek URL-je")
    
    # Kategoriz√°l√°s
    category: BadgeCategory = Field(..., description="Badge kateg√≥ri√°ja")
    rarity: BadgeRarity = Field(default=BadgeRarity.COMMON, description="Badge ritkas√°ga")
    
    # Felt√©telek
    condition_type: str = Field(..., description="Felt√©tel t√≠pusa (pl. transaction_count, savings_goal)")
    condition_config: Dict[str, Any] = Field(default_factory=dict, description="Felt√©tel konfigur√°ci√≥ja")
    
    # Badge tulajdons√°gok
    is_active: bool = Field(default=True, description="Akt√≠v-e a badge")
    is_repeatable: bool = Field(default=False, description="T√∂bbsz√∂r megszerezhet≈ë-e")
    points: int = Field(default=10, description="Badge pont√©rt√©ke")
    
    # Szint rendszer (opcion√°lis)
    has_levels: bool = Field(default=False, description="Van-e szintje")
    max_level: Optional[int] = Field(None, description="Maximum szint")
    
    # Meta
    created_at: datetime = Field(default_factory=datetime.utcnow)
    updated_at: datetime = Field(default_factory=datetime.utcnow)
    
    class Settings:
        name = "badge_types"
        indexes = ["code", "category", "is_active"]

class UserBadge(Document):
    """Felhaszn√°l√≥ √°ltal megszerzett badge"""
    
    user_id: PydanticObjectId = Field(..., description="Felhaszn√°l√≥ ID")
    badge_code: str = Field(..., description="Badge k√≥dja")
    
    # Szerz√©si inform√°ci√≥k
    earned_at: datetime = Field(default_factory=datetime.utcnow, description="Mikor szerezte meg")
    level: int = Field(default=1, description="Badge szintje")
    progress: float = Field(default=100.0, description="Halad√°s %-ban a k√∂vetkez≈ë szintig")
    
    # Kontextus inform√°ci√≥k
    context_data: Dict[str, Any] = Field(default_factory=dict, description="Szerz√©skor relev√°ns adatok")
    
    # Meta
    is_favorite: bool = Field(default=False, description="Kedvenc badge-e")
    is_visible: bool = Field(default=True, description="L√°that√≥-e a profilban")
    
    class Settings:
        name = "user_badges"
        indexes = [
            "user_id",
            "badge_code", 
            "earned_at",
            [("user_id", 1), ("badge_code", 1)],
            [("user_id", 1), ("earned_at", -1)]
        ]

class BadgeProgress(Document):
    """Felhaszn√°l√≥ halad√°sa egy badge megszerz√©se fel√©"""
    
    user_id: PydanticObjectId = Field(..., description="Felhaszn√°l√≥ ID")
    badge_code: str = Field(..., description="Badge k√≥dja")
    
    # Halad√°s k√∂vet√©s
    current_value: float = Field(default=0.0, description="Jelenlegi √©rt√©k")
    target_value: float = Field(..., description="C√©l √©rt√©k")
    progress_percentage: float = Field(default=0.0, description="Halad√°s %-ban")
    
    # Id≈ëk√∂vet≈ë
    started_at: datetime = Field(default_factory=datetime.utcnow, description="Mikor kezdte")
    last_updated: datetime = Field(default_factory=datetime.utcnow, description="Utols√≥ friss√≠t√©s")
    
    # Extra adatok
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Tov√°bbi k√∂vet√©si adatok")
    
    class Settings:
        name = "badge_progress"
        indexes = [
            "user_id",
            "badge_code",
            [("user_id", 1), ("badge_code", 1), ("progress_percentage", -1)]
        ]

# Response modellek
class BadgeTypeRead(BaseModel):
    id: str
    code: str
    name: str
    description: str
    icon: str
    color: str
    image_url: Optional[str]
    category: BadgeCategory
    rarity: BadgeRarity
    condition_type: str
    condition_config: Dict[str, Any]
    is_active: bool
    is_repeatable: bool
    points: int
    has_levels: bool
    max_level: Optional[int]

class UserBadgeRead(BaseModel):
    id: str
    user_id: str
    badge_code: str
    earned_at: datetime
    level: int
    progress: float
    context_data: Dict[str, Any]
    is_favorite: bool
    is_visible: bool
    
    # Badge t√≠pus adatok (join-elt)
    badge_name: Optional[str] = None
    badge_description: Optional[str] = None
    badge_icon: Optional[str] = None
    badge_color: Optional[str] = None
    badge_category: Optional[BadgeCategory] = None
    badge_rarity: Optional[BadgeRarity] = None
    badge_points: Optional[int] = None

class BadgeProgressRead(BaseModel):
    id: str
    user_id: str
    badge_code: str
    current_value: float
    target_value: float
    progress_percentage: float
    started_at: datetime
    last_updated: datetime
    metadata: Dict[str, Any]
    
    # Badge t√≠pus adatok (join-elt)
    badge_name: Optional[str] = None
    badge_description: Optional[str] = None
    badge_icon: Optional[str] = None
    badge_color: Optional[str] = None

class UserBadgeStats(BaseModel):
    total_badges: int
    total_points: int
    badges_by_category: Dict[str, int]
    badges_by_rarity: Dict[str, int]
    recent_badges: List[UserBadgeRead]
    favorite_badges: List[UserBadgeRead]
    in_progress_count: int

class BadgeEarnedEvent(BaseModel):
    """Badge szerz√©si esem√©ny √©rtes√≠t√©shez"""
    user_id: str
    badge_code: str
    badge_name: str
    badge_icon: str
    badge_rarity: BadgeRarity
    points_earned: int
    level: int
    is_new_badge: bool  # √öj badge vagy szint n√∂vel√©s