# app/models/knowledge.py

from __future__ import annotations
from beanie import Document, PydanticObjectId
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Literal
from datetime import datetime
from enum import Enum

class DifficultyLevel(str, Enum):
    BEGINNER = "beginner"  # üü¢Kezd≈ë
    PROFESSIONAL = "professional"  # üîµProfi

class QuestionType(str, Enum):
    MULTIPLE_CHOICE = "multiple_choice"
    TRUE_FALSE = "true_false"
    SINGLE_CHOICE = "single_choice"

class QuizQuestion(BaseModel):
    question: str = Field(..., description="A k√©rd√©s sz√∂vege")
    type: QuestionType = Field(default=QuestionType.MULTIPLE_CHOICE)
    options: List[str] = Field(..., description="V√°laszlehet≈ës√©gek")
    correct_answers: List[int] = Field(..., description="Helyes v√°laszok indexei (0-t√≥l kezdve)")
    explanation: Optional[str] = Field(None, description="Magyar√°zat a v√°laszhoz")

class LessonPage(BaseModel):
    title: str = Field(..., description="Oldal c√≠me")
    content: str = Field(..., description="Oldal tartalma (markdown vagy sima sz√∂veg)")
    order: int = Field(..., description="Oldal sorrendje a leck√©n bel√ºl")

class Lesson(Document):
    title: str = Field(..., description="Lecke c√≠me")
    description: Optional[str] = Field(None, description="Lecke r√∂vid le√≠r√°sa")
    category_id: PydanticObjectId = Field(..., description="Kateg√≥ria ID")
    difficulty: DifficultyLevel = Field(default=DifficultyLevel.BEGINNER)
    
    # Lecke tartalma
    pages: List[LessonPage] = Field(default_factory=list, description="Lecke oldalai")
    estimated_minutes: int = Field(default=5, description="Becs√ºlt tanul√°si id≈ë percekben")
    
    # Kv√≠z
    quiz_questions: List[QuizQuestion] = Field(default_factory=list, description="Lecke v√©gi kv√≠z k√©rd√©sei")
    
    # Meta adatok
    order: int = Field(default=0, description="Lecke sorrendje a kateg√≥ri√°n bel√ºl")
    is_published: bool = Field(default=True, description="Publik√°lt-e a lecke")
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)

    class Settings:
        name = "lessons"

class KnowledgeCategory(Document):
    name: str = Field(..., description="Kateg√≥ria neve")
    description: Optional[str] = Field(None, description="Kateg√≥ria le√≠r√°sa")
    icon: Optional[str] = Field(None, description="Kateg√≥ria ikonja (emoji vagy ikon n√©v)")
    color: Optional[str] = Field(None, description="Kateg√≥ria sz√≠ne (hex k√≥d)")
    order: int = Field(default=0, description="Kateg√≥ria sorrendje")
    is_active: bool = Field(default=True, description="Akt√≠v-e a kateg√≥ria")
    
    class Settings:
        name = "knowledge_categories"

# Felhaszn√°l√≥i halad√°s k√∂vet√©shez
class LessonCompletion(BaseModel):
    lesson_id: PydanticObjectId
    completed_at: datetime = Field(default_factory=datetime.now)
    pages_completed: int = Field(default=0, description="H√°ny oldalt teljes√≠tett")
    total_pages: int = Field(default=0, description="√ñsszesen h√°ny oldal van")
    quiz_score: Optional[int] = Field(None, description="Kv√≠z pontsz√°m %-ban")
    quiz_attempts: int = Field(default=0, description="H√°nyszor pr√≥b√°lkozott a kv√≠zzel")
    best_quiz_score: Optional[int] = Field(None, description="Legjobb kv√≠z eredm√©ny")

class UserProgress(Document):
    user_id: PydanticObjectId = Field(..., description="Felhaszn√°l√≥ ID")
    
    # Teljes√≠tett leck√©k
    completed_lessons: List[LessonCompletion] = Field(default_factory=list)
    
    # Streak sz√°m√≠t√°s
    current_streak: int = Field(default=0, description="Jelenlegi tanul√°si sorozat (napok)")
    longest_streak: int = Field(default=0, description="Leghosszabb tanul√°si sorozat")
    last_activity_date: Optional[datetime] = Field(None, description="Utols√≥ tanul√°si aktivit√°s d√°tuma")
    
    # Statisztik√°k
    total_lessons_completed: int = Field(default=0, description="√ñsszes teljes√≠tett lecke")
    total_quiz_attempts: int = Field(default=0, description="√ñsszes kv√≠z pr√≥b√°lkoz√°s")
    average_quiz_score: float = Field(default=0.0, description="√Åtlagos kv√≠z eredm√©ny")
    total_study_minutes: int = Field(default=0, description="√ñsszes tanul√°si id≈ë percekben")
    
    # Napi kih√≠v√°s
    daily_challenge_completed_today: bool = Field(default=False, description="Ma teljes√≠tette-e a napi kih√≠v√°st")
    daily_challenge_streak: int = Field(default=0, description="Napi kih√≠v√°s sorozat")
    
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)

    class Settings:
        name = "user_progress"

# Response modellek
class LessonSummary(BaseModel):
    id: str
    title: str
    description: Optional[str]
    difficulty: DifficultyLevel
    estimated_minutes: int
    total_pages: int
    has_quiz: bool
    is_completed: bool = False
    quiz_score: Optional[int] = None
    category_name: str

class CategoryWithLessons(BaseModel):
    id: str
    name: str
    description: Optional[str]
    icon: Optional[str]
    color: Optional[str]
    lessons: List[LessonSummary]
    total_lessons: int
    completed_lessons: int

class UserStats(BaseModel):
    current_streak: int
    longest_streak: int
    total_lessons_completed: int
    total_quiz_attempts: int
    average_quiz_score: float
    total_study_minutes: int
    daily_challenge_completed_today: bool
    daily_challenge_streak: int

class QuizResult(BaseModel):
    score: int  # Pontsz√°m %-ban
    correct_answers: int
    total_questions: int
    passed: bool  # √Åtment-e (pl. 70% felett)
    is_best_score: bool  # Ez-e az eddigi legjobb eredm√©ny