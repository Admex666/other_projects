import streamlit as st
import pandas as pd

from GOAT.load_data import load_all_data
from GOAT.normalize_points import apply_normalized_points
from GOAT.metrics import calculate_driver_metrics
from GOAT.teammate_comparison import compare_teammates
from GOAT.goat_index import calculate_goat_index
from GOAT.visualize import plot_goat_bar, plot_goat_scatter, plot_driver_career


@st.cache_data(show_spinner=True)
def prepare_data(data_path='datafiles'):
    data = load_all_data(data_path)

    # Normaliz√°lt pontsz√°mok
    results_norm = apply_normalized_points(data['results'])

    # Driver metrics (wins, poles, avg finish, races)
    driver_metrics = calculate_driver_metrics(results_norm, data['qualifying'])

    # Csapatt√°rs √∂sszehasonl√≠t√°s
    teammate_df = compare_teammates(results_norm, data['races'])

    # Driver neveket beillesztj√ºk k√©s≈ëbb a goat_df-be

    return data, results_norm, driver_metrics, teammate_df


def main():
    st.set_page_config(page_title="F1 GOAT Index Explorer", layout="wide")
    st.title("üèÅ Formula-1 GOAT Index Explorer")

    # --- Bet√∂lt√©s (cache-elve) ---
    data, results_norm, driver_metrics, teammate_df = prepare_data()

    # --- S√∫lyok slider-ekkel a sidebar-ban ---
    st.sidebar.header("GOAT Index S√∫lyoz√°s")
    w_points = st.sidebar.slider("Pontsz√°m s√∫lya", 0.0, 1.0, 0.30, 0.05)
    w_win = st.sidebar.slider("Gy≈ëzelmi ar√°ny s√∫lya", 0.0, 1.0, 0.25, 0.05)
    w_pole = st.sidebar.slider("Pole ar√°ny s√∫lya", 0.0, 1.0, 0.15, 0.05)
    w_finish = st.sidebar.slider("√Åtlagos helyez√©s s√∫lya", 0.0, 1.0, 0.15, 0.05)
    w_teammate = st.sidebar.slider("Csapatt√°rs elleni teljes√≠tm√©ny s√∫lya", 0.0, 1.0, 0.15, 0.05)

    # S√∫lyok normaliz√°l√°sa, hogy √∂sszeg√ºk 1 legyen, elker√ºlve hib√°t
    total_w = w_points + w_win + w_pole + w_finish + w_teammate
    if total_w == 0:
        st.sidebar.error("A s√∫lyok √∂sszege nem lehet nulla!")
        return
    weights = {
        'points': w_points / total_w,
        'win_rate': w_win / total_w,
        'pole_rate': w_pole / total_w,
        'avg_finish': w_finish / total_w,
        'teammate_score': w_teammate / total_w,
    }

    # GOAT index √∫jrasz√°mol√°sa
    goat_df = calculate_goat_index(driver_metrics, teammate_df, weights=weights)

    # Nevek bet√∂lt√©se √©s √∂sszevon√°sa
    drivers = data['drivers'][['driverId', 'forename', 'surname']]
    goat_df = goat_df.merge(drivers, on='driverId', how='left')

    menu = st.sidebar.selectbox("V√°lassz men√ºpontot:", [
        "üèÜ Top GOAT Pil√≥t√°k",
        "üìä Teljes√≠tm√©ny Kapcsolatok",
        "üöÄ Versenyz≈ë Karrierje",
        "‚ÑπÔ∏è Inform√°ci√≥"
    ])

    if menu == "üèÜ Top GOAT Pil√≥t√°k":
        st.header("Top 10 GOAT Index versenyz≈ë")
        fig = plot_goat_bar(goat_df, top_n=10)
        st.plotly_chart(fig, use_container_width=True)

        st.write("**A GOAT Index a k√∂vetkez≈ë mutat√≥k s√∫lyozott kombin√°ci√≥ja:**")
        st.markdown(f"""
        - √ñsszes√≠tett normaliz√°lt pontsz√°m (s√∫ly: {weights['points']:.2f})  
        - Gy≈ëzelmi ar√°ny (s√∫ly: {weights['win_rate']:.2f})  
        - Pole poz√≠ci√≥k ar√°nya (s√∫ly: {weights['pole_rate']:.2f})  
        - √Åtlagos befut√≥helyez√©s (inverz, s√∫ly: {weights['avg_finish']:.2f})  
        - Csapatt√°rs elleni teljes√≠tm√©ny (s√∫ly: {weights['teammate_score']:.2f})  
        """)

        st.dataframe(goat_df[['forename', 'surname', 'races', 'wins', 'poles', 'goat_index']].head(10))

    elif menu == "üìä Teljes√≠tm√©ny Kapcsolatok":
        st.header("Kapcsolatok a k√ºl√∂nb√∂z≈ë mutat√≥k k√∂z√∂tt")
        fig = plot_goat_scatter(goat_df)
        st.plotly_chart(fig, use_container_width=True)
        st.markdown("""
        Ez az √°bra megmutatja, hogyan viszonyul a versenyz≈ëk csapatt√°rs elleni teljes√≠tm√©nye (teammate score) √©s a gy≈ëzelmi ar√°nyuk.
        A pontok m√©rete √©s sz√≠ne a GOAT indexet jelzi.
        """)

    elif menu == "üöÄ Versenyz≈ë Karrierje":
        st.header("Versenyz≈ë szezononk√©nti pontsz√°mainak alakul√°sa")
        driver_options = goat_df.sort_values('goat_index', ascending=False)
        driver_map = {
            f"{row.forename} {row.surname}": row.driverId
            for _, row in driver_options.iterrows()
        }
        selected_driver = st.selectbox("V√°lassz versenyz≈ët:", list(driver_map.keys()))

        if selected_driver:
            driver_id = driver_map[selected_driver]
            fig = plot_driver_career(goat_df, driver_id, results_norm, data['races'])
            st.plotly_chart(fig, use_container_width=True)

    elif menu == "‚ÑπÔ∏è Inform√°ci√≥":
        st.header("Inform√°ci√≥")
        st.markdown("""
        Ez az alkalmaz√°s egy **Formula-1 GOAT Index** sz√°m√≠t√°st √©s vizualiz√°ci√≥t val√≥s√≠t meg.

        **A GOAT Index** t√∂bb mutat√≥ s√∫lyozott kombin√°ci√≥ja, amely normaliz√°lt pontsz√°mokat, gy≈ëzelmi ar√°nyt, pole poz√≠ci√≥kat, √°tlagos befut√≥helyez√©st √©s csapatt√°rs elleni teljes√≠tm√©nyt vesz figyelembe.

        Az adatok az F1 teljes t√∂rt√©nelm√©b≈ël sz√°rmaznak.
        """)

    else:
        st.write("V√°lassz men√ºpontot a bal oldali men√ºb≈ël.")


if __name__ == "__main__":
    main()
